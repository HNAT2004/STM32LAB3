
LAB3_Exercise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d54  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002e60  08002e60  00012e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e84  08002e84  00020058  2**0
                  CONTENTS
  4 .ARM          00000000  08002e84  08002e84  00020058  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e84  08002e84  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e84  08002e84  00012e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e88  08002e88  00012e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  08002e8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000058  08002ee4  00020058  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08002ee4  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009c67  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c06  00000000  00000000  00029ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af8  00000000  00000000  0002b8f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d8  00000000  00000000  0002c3e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f5e  00000000  00000000  0002cdc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c27c  00000000  00000000  00043d1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082809  00000000  00000000  0004ff9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d27a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ad8  00000000  00000000  000d27f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000058 	.word	0x20000058
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e48 	.word	0x08002e48

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000005c 	.word	0x2000005c
 8000148:	08002e48 	.word	0x08002e48

0800014c <subKeyProcess_1>:

int timerForKeyPress_1 = 200;
int timerForKeyPress_2 = 200;
int timerForKeyPress_3 = 200;

void subKeyProcess_1(void){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	button1_flag = 1;
 8000150:	4b03      	ldr	r3, [pc, #12]	; (8000160 <subKeyProcess_1+0x14>)
 8000152:	2201      	movs	r2, #1
 8000154:	601a      	str	r2, [r3, #0]
}
 8000156:	bf00      	nop
 8000158:	46bd      	mov	sp, r7
 800015a:	bc80      	pop	{r7}
 800015c:	4770      	bx	lr
 800015e:	bf00      	nop
 8000160:	20000074 	.word	0x20000074

08000164 <subKeyProcess_2>:

void subKeyProcess_2(void){
 8000164:	b480      	push	{r7}
 8000166:	af00      	add	r7, sp, #0
	button2_flag = 1;
 8000168:	4b03      	ldr	r3, [pc, #12]	; (8000178 <subKeyProcess_2+0x14>)
 800016a:	2201      	movs	r2, #1
 800016c:	601a      	str	r2, [r3, #0]
}
 800016e:	bf00      	nop
 8000170:	46bd      	mov	sp, r7
 8000172:	bc80      	pop	{r7}
 8000174:	4770      	bx	lr
 8000176:	bf00      	nop
 8000178:	20000078 	.word	0x20000078

0800017c <subKeyProcess_3>:

void subKeyProcess_3(void){
 800017c:	b480      	push	{r7}
 800017e:	af00      	add	r7, sp, #0
	button3_flag = 1;
 8000180:	4b03      	ldr	r3, [pc, #12]	; (8000190 <subKeyProcess_3+0x14>)
 8000182:	2201      	movs	r2, #1
 8000184:	601a      	str	r2, [r3, #0]
}
 8000186:	bf00      	nop
 8000188:	46bd      	mov	sp, r7
 800018a:	bc80      	pop	{r7}
 800018c:	4770      	bx	lr
 800018e:	bf00      	nop
 8000190:	2000007c 	.word	0x2000007c

08000194 <isButton1Pressed>:

int isButton1Pressed(void){
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if (button1_flag == 1){
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isButton1Pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isButton1Pressed+0x16>
		button1_flag = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isButton1Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isButton1Pressed+0x18>
	}
	else return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	20000074 	.word	0x20000074

080001b8 <isButton2Pressed>:

int isButton2Pressed(void){
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
	if (button2_flag == 1){
 80001bc:	4b06      	ldr	r3, [pc, #24]	; (80001d8 <isButton2Pressed+0x20>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	2b01      	cmp	r3, #1
 80001c2:	d104      	bne.n	80001ce <isButton2Pressed+0x16>
		button2_flag = 0;
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <isButton2Pressed+0x20>)
 80001c6:	2200      	movs	r2, #0
 80001c8:	601a      	str	r2, [r3, #0]
		return 1;
 80001ca:	2301      	movs	r3, #1
 80001cc:	e000      	b.n	80001d0 <isButton2Pressed+0x18>
	}
	else return 0;
 80001ce:	2300      	movs	r3, #0
}
 80001d0:	4618      	mov	r0, r3
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bc80      	pop	{r7}
 80001d6:	4770      	bx	lr
 80001d8:	20000078 	.word	0x20000078

080001dc <isButton3Pressed>:

int isButton3Pressed(void){
 80001dc:	b480      	push	{r7}
 80001de:	af00      	add	r7, sp, #0
	if (button3_flag == 1){
 80001e0:	4b06      	ldr	r3, [pc, #24]	; (80001fc <isButton3Pressed+0x20>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	2b01      	cmp	r3, #1
 80001e6:	d104      	bne.n	80001f2 <isButton3Pressed+0x16>
		button3_flag = 0;
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <isButton3Pressed+0x20>)
 80001ea:	2200      	movs	r2, #0
 80001ec:	601a      	str	r2, [r3, #0]
		return 1;
 80001ee:	2301      	movs	r3, #1
 80001f0:	e000      	b.n	80001f4 <isButton3Pressed+0x18>
	}
	else return 0;
 80001f2:	2300      	movs	r3, #0
}
 80001f4:	4618      	mov	r0, r3
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bc80      	pop	{r7}
 80001fa:	4770      	bx	lr
 80001fc:	2000007c 	.word	0x2000007c

08000200 <getKeyInput_1>:

void getKeyInput_1(void){
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	KeyReg0_B1 = KeyReg1_B1;
 8000204:	4b1f      	ldr	r3, [pc, #124]	; (8000284 <getKeyInput_1+0x84>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a1f      	ldr	r2, [pc, #124]	; (8000288 <getKeyInput_1+0x88>)
 800020a:	6013      	str	r3, [r2, #0]
	KeyReg1_B1 = KeyReg2_B1;
 800020c:	4b1f      	ldr	r3, [pc, #124]	; (800028c <getKeyInput_1+0x8c>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a1c      	ldr	r2, [pc, #112]	; (8000284 <getKeyInput_1+0x84>)
 8000212:	6013      	str	r3, [r2, #0]
	KeyReg2_B1 = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin); //Read current signal of button
 8000214:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000218:	481d      	ldr	r0, [pc, #116]	; (8000290 <getKeyInput_1+0x90>)
 800021a:	f001 fde9 	bl	8001df0 <HAL_GPIO_ReadPin>
 800021e:	4603      	mov	r3, r0
 8000220:	461a      	mov	r2, r3
 8000222:	4b1a      	ldr	r3, [pc, #104]	; (800028c <getKeyInput_1+0x8c>)
 8000224:	601a      	str	r2, [r3, #0]
	if ((KeyReg0_B1 == KeyReg1_B1) && (KeyReg1_B1 == KeyReg2_B1)){	//Debounce
 8000226:	4b18      	ldr	r3, [pc, #96]	; (8000288 <getKeyInput_1+0x88>)
 8000228:	681a      	ldr	r2, [r3, #0]
 800022a:	4b16      	ldr	r3, [pc, #88]	; (8000284 <getKeyInput_1+0x84>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	429a      	cmp	r2, r3
 8000230:	d125      	bne.n	800027e <getKeyInput_1+0x7e>
 8000232:	4b14      	ldr	r3, [pc, #80]	; (8000284 <getKeyInput_1+0x84>)
 8000234:	681a      	ldr	r2, [r3, #0]
 8000236:	4b15      	ldr	r3, [pc, #84]	; (800028c <getKeyInput_1+0x8c>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	429a      	cmp	r2, r3
 800023c:	d11f      	bne.n	800027e <getKeyInput_1+0x7e>
		if (KeyReg3_B1 != KeyReg2_B1){
 800023e:	4b15      	ldr	r3, [pc, #84]	; (8000294 <getKeyInput_1+0x94>)
 8000240:	681a      	ldr	r2, [r3, #0]
 8000242:	4b12      	ldr	r3, [pc, #72]	; (800028c <getKeyInput_1+0x8c>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	429a      	cmp	r2, r3
 8000248:	d00d      	beq.n	8000266 <getKeyInput_1+0x66>
			KeyReg3_B1 = KeyReg2_B1;
 800024a:	4b10      	ldr	r3, [pc, #64]	; (800028c <getKeyInput_1+0x8c>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	4a11      	ldr	r2, [pc, #68]	; (8000294 <getKeyInput_1+0x94>)
 8000250:	6013      	str	r3, [r2, #0]
			if (KeyReg2_B1 == PRESSED_STATE){
 8000252:	4b0e      	ldr	r3, [pc, #56]	; (800028c <getKeyInput_1+0x8c>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d111      	bne.n	800027e <getKeyInput_1+0x7e>
				subKeyProcess_1();
 800025a:	f7ff ff77 	bl	800014c <subKeyProcess_1>
				timerForKeyPress_1 = 200;
 800025e:	4b0e      	ldr	r3, [pc, #56]	; (8000298 <getKeyInput_1+0x98>)
 8000260:	22c8      	movs	r2, #200	; 0xc8
 8000262:	601a      	str	r2, [r3, #0]
			if (timerForKeyPress_1 == 0){
				KeyReg3_B1 = NORMAL_STATE;
			}
		}
	}
}
 8000264:	e00b      	b.n	800027e <getKeyInput_1+0x7e>
			timerForKeyPress_1--;
 8000266:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <getKeyInput_1+0x98>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	3b01      	subs	r3, #1
 800026c:	4a0a      	ldr	r2, [pc, #40]	; (8000298 <getKeyInput_1+0x98>)
 800026e:	6013      	str	r3, [r2, #0]
			if (timerForKeyPress_1 == 0){
 8000270:	4b09      	ldr	r3, [pc, #36]	; (8000298 <getKeyInput_1+0x98>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d102      	bne.n	800027e <getKeyInput_1+0x7e>
				KeyReg3_B1 = NORMAL_STATE;
 8000278:	4b06      	ldr	r3, [pc, #24]	; (8000294 <getKeyInput_1+0x94>)
 800027a:	2201      	movs	r2, #1
 800027c:	601a      	str	r2, [r3, #0]
}
 800027e:	bf00      	nop
 8000280:	bd80      	pop	{r7, pc}
 8000282:	bf00      	nop
 8000284:	20000004 	.word	0x20000004
 8000288:	20000000 	.word	0x20000000
 800028c:	20000008 	.word	0x20000008
 8000290:	40010c00 	.word	0x40010c00
 8000294:	2000000c 	.word	0x2000000c
 8000298:	20000030 	.word	0x20000030

0800029c <getKeyInput_2>:

void getKeyInput_2(void){
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	KeyReg0_B2 = KeyReg1_B2;
 80002a0:	4b1f      	ldr	r3, [pc, #124]	; (8000320 <getKeyInput_2+0x84>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a1f      	ldr	r2, [pc, #124]	; (8000324 <getKeyInput_2+0x88>)
 80002a6:	6013      	str	r3, [r2, #0]
	KeyReg1_B2 = KeyReg2_B2;
 80002a8:	4b1f      	ldr	r3, [pc, #124]	; (8000328 <getKeyInput_2+0x8c>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a1c      	ldr	r2, [pc, #112]	; (8000320 <getKeyInput_2+0x84>)
 80002ae:	6013      	str	r3, [r2, #0]
	KeyReg2_B2 = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin); //Read current signal of button
 80002b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002b4:	481d      	ldr	r0, [pc, #116]	; (800032c <getKeyInput_2+0x90>)
 80002b6:	f001 fd9b 	bl	8001df0 <HAL_GPIO_ReadPin>
 80002ba:	4603      	mov	r3, r0
 80002bc:	461a      	mov	r2, r3
 80002be:	4b1a      	ldr	r3, [pc, #104]	; (8000328 <getKeyInput_2+0x8c>)
 80002c0:	601a      	str	r2, [r3, #0]
	if ((KeyReg0_B2 == KeyReg1_B2) && (KeyReg1_B2 == KeyReg2_B2)){	//Debounce
 80002c2:	4b18      	ldr	r3, [pc, #96]	; (8000324 <getKeyInput_2+0x88>)
 80002c4:	681a      	ldr	r2, [r3, #0]
 80002c6:	4b16      	ldr	r3, [pc, #88]	; (8000320 <getKeyInput_2+0x84>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	429a      	cmp	r2, r3
 80002cc:	d125      	bne.n	800031a <getKeyInput_2+0x7e>
 80002ce:	4b14      	ldr	r3, [pc, #80]	; (8000320 <getKeyInput_2+0x84>)
 80002d0:	681a      	ldr	r2, [r3, #0]
 80002d2:	4b15      	ldr	r3, [pc, #84]	; (8000328 <getKeyInput_2+0x8c>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	429a      	cmp	r2, r3
 80002d8:	d11f      	bne.n	800031a <getKeyInput_2+0x7e>
		if (KeyReg3_B2 != KeyReg2_B2){
 80002da:	4b15      	ldr	r3, [pc, #84]	; (8000330 <getKeyInput_2+0x94>)
 80002dc:	681a      	ldr	r2, [r3, #0]
 80002de:	4b12      	ldr	r3, [pc, #72]	; (8000328 <getKeyInput_2+0x8c>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	429a      	cmp	r2, r3
 80002e4:	d00d      	beq.n	8000302 <getKeyInput_2+0x66>
			KeyReg3_B2 = KeyReg2_B2;
 80002e6:	4b10      	ldr	r3, [pc, #64]	; (8000328 <getKeyInput_2+0x8c>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	4a11      	ldr	r2, [pc, #68]	; (8000330 <getKeyInput_2+0x94>)
 80002ec:	6013      	str	r3, [r2, #0]
			if (KeyReg2_B2 == PRESSED_STATE){
 80002ee:	4b0e      	ldr	r3, [pc, #56]	; (8000328 <getKeyInput_2+0x8c>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d111      	bne.n	800031a <getKeyInput_2+0x7e>
				subKeyProcess_2();
 80002f6:	f7ff ff35 	bl	8000164 <subKeyProcess_2>
				timerForKeyPress_2 = 200;
 80002fa:	4b0e      	ldr	r3, [pc, #56]	; (8000334 <getKeyInput_2+0x98>)
 80002fc:	22c8      	movs	r2, #200	; 0xc8
 80002fe:	601a      	str	r2, [r3, #0]
			if (timerForKeyPress_2 == 0){
				KeyReg3_B2 = NORMAL_STATE;
			}
		}
	}
}
 8000300:	e00b      	b.n	800031a <getKeyInput_2+0x7e>
			timerForKeyPress_2--;
 8000302:	4b0c      	ldr	r3, [pc, #48]	; (8000334 <getKeyInput_2+0x98>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	3b01      	subs	r3, #1
 8000308:	4a0a      	ldr	r2, [pc, #40]	; (8000334 <getKeyInput_2+0x98>)
 800030a:	6013      	str	r3, [r2, #0]
			if (timerForKeyPress_2 == 0){
 800030c:	4b09      	ldr	r3, [pc, #36]	; (8000334 <getKeyInput_2+0x98>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d102      	bne.n	800031a <getKeyInput_2+0x7e>
				KeyReg3_B2 = NORMAL_STATE;
 8000314:	4b06      	ldr	r3, [pc, #24]	; (8000330 <getKeyInput_2+0x94>)
 8000316:	2201      	movs	r2, #1
 8000318:	601a      	str	r2, [r3, #0]
}
 800031a:	bf00      	nop
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	20000014 	.word	0x20000014
 8000324:	20000010 	.word	0x20000010
 8000328:	20000018 	.word	0x20000018
 800032c:	40010c00 	.word	0x40010c00
 8000330:	2000001c 	.word	0x2000001c
 8000334:	20000034 	.word	0x20000034

08000338 <getKeyInput_3>:

void getKeyInput_3(void){
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
	KeyReg0_B3 = KeyReg1_B3;
 800033c:	4b1f      	ldr	r3, [pc, #124]	; (80003bc <getKeyInput_3+0x84>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a1f      	ldr	r2, [pc, #124]	; (80003c0 <getKeyInput_3+0x88>)
 8000342:	6013      	str	r3, [r2, #0]
	KeyReg1_B3 = KeyReg2_B3;
 8000344:	4b1f      	ldr	r3, [pc, #124]	; (80003c4 <getKeyInput_3+0x8c>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a1c      	ldr	r2, [pc, #112]	; (80003bc <getKeyInput_3+0x84>)
 800034a:	6013      	str	r3, [r2, #0]
	KeyReg2_B3 = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin); //Read current signal of button
 800034c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000350:	481d      	ldr	r0, [pc, #116]	; (80003c8 <getKeyInput_3+0x90>)
 8000352:	f001 fd4d 	bl	8001df0 <HAL_GPIO_ReadPin>
 8000356:	4603      	mov	r3, r0
 8000358:	461a      	mov	r2, r3
 800035a:	4b1a      	ldr	r3, [pc, #104]	; (80003c4 <getKeyInput_3+0x8c>)
 800035c:	601a      	str	r2, [r3, #0]
	if ((KeyReg0_B3 == KeyReg1_B3) && (KeyReg1_B3 == KeyReg2_B3)){	//Debounce
 800035e:	4b18      	ldr	r3, [pc, #96]	; (80003c0 <getKeyInput_3+0x88>)
 8000360:	681a      	ldr	r2, [r3, #0]
 8000362:	4b16      	ldr	r3, [pc, #88]	; (80003bc <getKeyInput_3+0x84>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	429a      	cmp	r2, r3
 8000368:	d125      	bne.n	80003b6 <getKeyInput_3+0x7e>
 800036a:	4b14      	ldr	r3, [pc, #80]	; (80003bc <getKeyInput_3+0x84>)
 800036c:	681a      	ldr	r2, [r3, #0]
 800036e:	4b15      	ldr	r3, [pc, #84]	; (80003c4 <getKeyInput_3+0x8c>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	429a      	cmp	r2, r3
 8000374:	d11f      	bne.n	80003b6 <getKeyInput_3+0x7e>
		if (KeyReg3_B3 != KeyReg2_B3){
 8000376:	4b15      	ldr	r3, [pc, #84]	; (80003cc <getKeyInput_3+0x94>)
 8000378:	681a      	ldr	r2, [r3, #0]
 800037a:	4b12      	ldr	r3, [pc, #72]	; (80003c4 <getKeyInput_3+0x8c>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	429a      	cmp	r2, r3
 8000380:	d00d      	beq.n	800039e <getKeyInput_3+0x66>
			KeyReg3_B3 = KeyReg2_B3;
 8000382:	4b10      	ldr	r3, [pc, #64]	; (80003c4 <getKeyInput_3+0x8c>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4a11      	ldr	r2, [pc, #68]	; (80003cc <getKeyInput_3+0x94>)
 8000388:	6013      	str	r3, [r2, #0]
			if (KeyReg2_B3 == PRESSED_STATE){
 800038a:	4b0e      	ldr	r3, [pc, #56]	; (80003c4 <getKeyInput_3+0x8c>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d111      	bne.n	80003b6 <getKeyInput_3+0x7e>
				subKeyProcess_3();
 8000392:	f7ff fef3 	bl	800017c <subKeyProcess_3>
				timerForKeyPress_3 = 200;
 8000396:	4b0e      	ldr	r3, [pc, #56]	; (80003d0 <getKeyInput_3+0x98>)
 8000398:	22c8      	movs	r2, #200	; 0xc8
 800039a:	601a      	str	r2, [r3, #0]
			if (timerForKeyPress_3 == 0){
				KeyReg3_B3 = NORMAL_STATE;
			}
		}
	}
}
 800039c:	e00b      	b.n	80003b6 <getKeyInput_3+0x7e>
			timerForKeyPress_3--;
 800039e:	4b0c      	ldr	r3, [pc, #48]	; (80003d0 <getKeyInput_3+0x98>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	3b01      	subs	r3, #1
 80003a4:	4a0a      	ldr	r2, [pc, #40]	; (80003d0 <getKeyInput_3+0x98>)
 80003a6:	6013      	str	r3, [r2, #0]
			if (timerForKeyPress_3 == 0){
 80003a8:	4b09      	ldr	r3, [pc, #36]	; (80003d0 <getKeyInput_3+0x98>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d102      	bne.n	80003b6 <getKeyInput_3+0x7e>
				KeyReg3_B3 = NORMAL_STATE;
 80003b0:	4b06      	ldr	r3, [pc, #24]	; (80003cc <getKeyInput_3+0x94>)
 80003b2:	2201      	movs	r2, #1
 80003b4:	601a      	str	r2, [r3, #0]
}
 80003b6:	bf00      	nop
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	20000024 	.word	0x20000024
 80003c0:	20000020 	.word	0x20000020
 80003c4:	20000028 	.word	0x20000028
 80003c8:	40010c00 	.word	0x40010c00
 80003cc:	2000002c 	.word	0x2000002c
 80003d0:	20000038 	.word	0x20000038

080003d4 <display7SEG_X>:
int index_led_Y = 0;
int index_led = 0;
int led_buffer_X[2] = {0, 0};
int led_buffer_Y[2] = {0, 0};

void display7SEG_X(int number){
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	2b09      	cmp	r3, #9
 80003e0:	f200 81bc 	bhi.w	800075c <display7SEG_X+0x388>
 80003e4:	a201      	add	r2, pc, #4	; (adr r2, 80003ec <display7SEG_X+0x18>)
 80003e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003ea:	bf00      	nop
 80003ec:	08000415 	.word	0x08000415
 80003f0:	08000469 	.word	0x08000469
 80003f4:	080004bd 	.word	0x080004bd
 80003f8:	08000511 	.word	0x08000511
 80003fc:	08000565 	.word	0x08000565
 8000400:	080005b9 	.word	0x080005b9
 8000404:	0800060d 	.word	0x0800060d
 8000408:	08000661 	.word	0x08000661
 800040c:	080006b5 	.word	0x080006b5
 8000410:	08000709 	.word	0x08000709
	switch(number){
	case 0:
		HAL_GPIO_WritePin(SEG0_X_GPIO_Port, SEG0_X_Pin, RESET);
 8000414:	2200      	movs	r2, #0
 8000416:	2180      	movs	r1, #128	; 0x80
 8000418:	48d3      	ldr	r0, [pc, #844]	; (8000768 <display7SEG_X+0x394>)
 800041a:	f001 fd00 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_X_GPIO_Port, SEG1_X_Pin, RESET);
 800041e:	2200      	movs	r2, #0
 8000420:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000424:	48d0      	ldr	r0, [pc, #832]	; (8000768 <display7SEG_X+0x394>)
 8000426:	f001 fcfa 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_X_GPIO_Port, SEG2_X_Pin, RESET);
 800042a:	2200      	movs	r2, #0
 800042c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000430:	48cd      	ldr	r0, [pc, #820]	; (8000768 <display7SEG_X+0x394>)
 8000432:	f001 fcf4 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_X_GPIO_Port, SEG3_X_Pin, RESET);
 8000436:	2200      	movs	r2, #0
 8000438:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800043c:	48ca      	ldr	r0, [pc, #808]	; (8000768 <display7SEG_X+0x394>)
 800043e:	f001 fcee 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_X_GPIO_Port, SEG4_X_Pin, RESET);
 8000442:	2200      	movs	r2, #0
 8000444:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000448:	48c7      	ldr	r0, [pc, #796]	; (8000768 <display7SEG_X+0x394>)
 800044a:	f001 fce8 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_X_GPIO_Port, SEG5_X_Pin, RESET);
 800044e:	2200      	movs	r2, #0
 8000450:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000454:	48c4      	ldr	r0, [pc, #784]	; (8000768 <display7SEG_X+0x394>)
 8000456:	f001 fce2 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_X_GPIO_Port, SEG6_X_Pin, SET);
 800045a:	2201      	movs	r2, #1
 800045c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000460:	48c1      	ldr	r0, [pc, #772]	; (8000768 <display7SEG_X+0x394>)
 8000462:	f001 fcdc 	bl	8001e1e <HAL_GPIO_WritePin>
		break;
 8000466:	e17a      	b.n	800075e <display7SEG_X+0x38a>
	case 1:
		HAL_GPIO_WritePin(SEG0_X_GPIO_Port, SEG0_X_Pin, SET);
 8000468:	2201      	movs	r2, #1
 800046a:	2180      	movs	r1, #128	; 0x80
 800046c:	48be      	ldr	r0, [pc, #760]	; (8000768 <display7SEG_X+0x394>)
 800046e:	f001 fcd6 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_X_GPIO_Port, SEG1_X_Pin, RESET);
 8000472:	2200      	movs	r2, #0
 8000474:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000478:	48bb      	ldr	r0, [pc, #748]	; (8000768 <display7SEG_X+0x394>)
 800047a:	f001 fcd0 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_X_GPIO_Port, SEG2_X_Pin, RESET);
 800047e:	2200      	movs	r2, #0
 8000480:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000484:	48b8      	ldr	r0, [pc, #736]	; (8000768 <display7SEG_X+0x394>)
 8000486:	f001 fcca 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_X_GPIO_Port, SEG3_X_Pin, SET);
 800048a:	2201      	movs	r2, #1
 800048c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000490:	48b5      	ldr	r0, [pc, #724]	; (8000768 <display7SEG_X+0x394>)
 8000492:	f001 fcc4 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_X_GPIO_Port, SEG4_X_Pin, SET);
 8000496:	2201      	movs	r2, #1
 8000498:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800049c:	48b2      	ldr	r0, [pc, #712]	; (8000768 <display7SEG_X+0x394>)
 800049e:	f001 fcbe 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_X_GPIO_Port, SEG5_X_Pin, SET);
 80004a2:	2201      	movs	r2, #1
 80004a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004a8:	48af      	ldr	r0, [pc, #700]	; (8000768 <display7SEG_X+0x394>)
 80004aa:	f001 fcb8 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_X_GPIO_Port, SEG6_X_Pin, SET);
 80004ae:	2201      	movs	r2, #1
 80004b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004b4:	48ac      	ldr	r0, [pc, #688]	; (8000768 <display7SEG_X+0x394>)
 80004b6:	f001 fcb2 	bl	8001e1e <HAL_GPIO_WritePin>
		break;
 80004ba:	e150      	b.n	800075e <display7SEG_X+0x38a>
	case 2:
		HAL_GPIO_WritePin(SEG0_X_GPIO_Port, SEG0_X_Pin, RESET);
 80004bc:	2200      	movs	r2, #0
 80004be:	2180      	movs	r1, #128	; 0x80
 80004c0:	48a9      	ldr	r0, [pc, #676]	; (8000768 <display7SEG_X+0x394>)
 80004c2:	f001 fcac 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_X_GPIO_Port, SEG1_X_Pin, RESET);
 80004c6:	2200      	movs	r2, #0
 80004c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004cc:	48a6      	ldr	r0, [pc, #664]	; (8000768 <display7SEG_X+0x394>)
 80004ce:	f001 fca6 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_X_GPIO_Port, SEG2_X_Pin, SET);
 80004d2:	2201      	movs	r2, #1
 80004d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004d8:	48a3      	ldr	r0, [pc, #652]	; (8000768 <display7SEG_X+0x394>)
 80004da:	f001 fca0 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_X_GPIO_Port, SEG3_X_Pin, RESET);
 80004de:	2200      	movs	r2, #0
 80004e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004e4:	48a0      	ldr	r0, [pc, #640]	; (8000768 <display7SEG_X+0x394>)
 80004e6:	f001 fc9a 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_X_GPIO_Port, SEG4_X_Pin, RESET);
 80004ea:	2200      	movs	r2, #0
 80004ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004f0:	489d      	ldr	r0, [pc, #628]	; (8000768 <display7SEG_X+0x394>)
 80004f2:	f001 fc94 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_X_GPIO_Port, SEG5_X_Pin, SET);
 80004f6:	2201      	movs	r2, #1
 80004f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004fc:	489a      	ldr	r0, [pc, #616]	; (8000768 <display7SEG_X+0x394>)
 80004fe:	f001 fc8e 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_X_GPIO_Port, SEG6_X_Pin, RESET);
 8000502:	2200      	movs	r2, #0
 8000504:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000508:	4897      	ldr	r0, [pc, #604]	; (8000768 <display7SEG_X+0x394>)
 800050a:	f001 fc88 	bl	8001e1e <HAL_GPIO_WritePin>
		break;
 800050e:	e126      	b.n	800075e <display7SEG_X+0x38a>
	case 3:
		HAL_GPIO_WritePin(SEG0_X_GPIO_Port, SEG0_X_Pin, RESET);
 8000510:	2200      	movs	r2, #0
 8000512:	2180      	movs	r1, #128	; 0x80
 8000514:	4894      	ldr	r0, [pc, #592]	; (8000768 <display7SEG_X+0x394>)
 8000516:	f001 fc82 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_X_GPIO_Port, SEG1_X_Pin, RESET);
 800051a:	2200      	movs	r2, #0
 800051c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000520:	4891      	ldr	r0, [pc, #580]	; (8000768 <display7SEG_X+0x394>)
 8000522:	f001 fc7c 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_X_GPIO_Port, SEG2_X_Pin, RESET);
 8000526:	2200      	movs	r2, #0
 8000528:	f44f 7100 	mov.w	r1, #512	; 0x200
 800052c:	488e      	ldr	r0, [pc, #568]	; (8000768 <display7SEG_X+0x394>)
 800052e:	f001 fc76 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_X_GPIO_Port, SEG3_X_Pin, RESET);
 8000532:	2200      	movs	r2, #0
 8000534:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000538:	488b      	ldr	r0, [pc, #556]	; (8000768 <display7SEG_X+0x394>)
 800053a:	f001 fc70 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_X_GPIO_Port, SEG4_X_Pin, SET);
 800053e:	2201      	movs	r2, #1
 8000540:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000544:	4888      	ldr	r0, [pc, #544]	; (8000768 <display7SEG_X+0x394>)
 8000546:	f001 fc6a 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_X_GPIO_Port, SEG5_X_Pin, SET);
 800054a:	2201      	movs	r2, #1
 800054c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000550:	4885      	ldr	r0, [pc, #532]	; (8000768 <display7SEG_X+0x394>)
 8000552:	f001 fc64 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_X_GPIO_Port, SEG6_X_Pin, RESET);
 8000556:	2200      	movs	r2, #0
 8000558:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800055c:	4882      	ldr	r0, [pc, #520]	; (8000768 <display7SEG_X+0x394>)
 800055e:	f001 fc5e 	bl	8001e1e <HAL_GPIO_WritePin>
		break;
 8000562:	e0fc      	b.n	800075e <display7SEG_X+0x38a>
	case 4:
		HAL_GPIO_WritePin(SEG0_X_GPIO_Port, SEG0_X_Pin, SET);
 8000564:	2201      	movs	r2, #1
 8000566:	2180      	movs	r1, #128	; 0x80
 8000568:	487f      	ldr	r0, [pc, #508]	; (8000768 <display7SEG_X+0x394>)
 800056a:	f001 fc58 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_X_GPIO_Port, SEG1_X_Pin, RESET);
 800056e:	2200      	movs	r2, #0
 8000570:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000574:	487c      	ldr	r0, [pc, #496]	; (8000768 <display7SEG_X+0x394>)
 8000576:	f001 fc52 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_X_GPIO_Port, SEG2_X_Pin, RESET);
 800057a:	2200      	movs	r2, #0
 800057c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000580:	4879      	ldr	r0, [pc, #484]	; (8000768 <display7SEG_X+0x394>)
 8000582:	f001 fc4c 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_X_GPIO_Port, SEG3_X_Pin, SET);
 8000586:	2201      	movs	r2, #1
 8000588:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800058c:	4876      	ldr	r0, [pc, #472]	; (8000768 <display7SEG_X+0x394>)
 800058e:	f001 fc46 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_X_GPIO_Port, SEG4_X_Pin, SET);
 8000592:	2201      	movs	r2, #1
 8000594:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000598:	4873      	ldr	r0, [pc, #460]	; (8000768 <display7SEG_X+0x394>)
 800059a:	f001 fc40 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_X_GPIO_Port, SEG5_X_Pin, RESET);
 800059e:	2200      	movs	r2, #0
 80005a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005a4:	4870      	ldr	r0, [pc, #448]	; (8000768 <display7SEG_X+0x394>)
 80005a6:	f001 fc3a 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_X_GPIO_Port, SEG6_X_Pin, RESET);
 80005aa:	2200      	movs	r2, #0
 80005ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005b0:	486d      	ldr	r0, [pc, #436]	; (8000768 <display7SEG_X+0x394>)
 80005b2:	f001 fc34 	bl	8001e1e <HAL_GPIO_WritePin>
		break;
 80005b6:	e0d2      	b.n	800075e <display7SEG_X+0x38a>
	case 5:
		HAL_GPIO_WritePin(SEG0_X_GPIO_Port, SEG0_X_Pin, RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	2180      	movs	r1, #128	; 0x80
 80005bc:	486a      	ldr	r0, [pc, #424]	; (8000768 <display7SEG_X+0x394>)
 80005be:	f001 fc2e 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_X_GPIO_Port, SEG1_X_Pin, SET);
 80005c2:	2201      	movs	r2, #1
 80005c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005c8:	4867      	ldr	r0, [pc, #412]	; (8000768 <display7SEG_X+0x394>)
 80005ca:	f001 fc28 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_X_GPIO_Port, SEG2_X_Pin, RESET);
 80005ce:	2200      	movs	r2, #0
 80005d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005d4:	4864      	ldr	r0, [pc, #400]	; (8000768 <display7SEG_X+0x394>)
 80005d6:	f001 fc22 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_X_GPIO_Port, SEG3_X_Pin, RESET);
 80005da:	2200      	movs	r2, #0
 80005dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005e0:	4861      	ldr	r0, [pc, #388]	; (8000768 <display7SEG_X+0x394>)
 80005e2:	f001 fc1c 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_X_GPIO_Port, SEG4_X_Pin, SET);
 80005e6:	2201      	movs	r2, #1
 80005e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005ec:	485e      	ldr	r0, [pc, #376]	; (8000768 <display7SEG_X+0x394>)
 80005ee:	f001 fc16 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_X_GPIO_Port, SEG5_X_Pin, RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005f8:	485b      	ldr	r0, [pc, #364]	; (8000768 <display7SEG_X+0x394>)
 80005fa:	f001 fc10 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_X_GPIO_Port, SEG6_X_Pin, RESET);
 80005fe:	2200      	movs	r2, #0
 8000600:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000604:	4858      	ldr	r0, [pc, #352]	; (8000768 <display7SEG_X+0x394>)
 8000606:	f001 fc0a 	bl	8001e1e <HAL_GPIO_WritePin>
		break;
 800060a:	e0a8      	b.n	800075e <display7SEG_X+0x38a>
	case 6:
		HAL_GPIO_WritePin(SEG0_X_GPIO_Port, SEG0_X_Pin, RESET);
 800060c:	2200      	movs	r2, #0
 800060e:	2180      	movs	r1, #128	; 0x80
 8000610:	4855      	ldr	r0, [pc, #340]	; (8000768 <display7SEG_X+0x394>)
 8000612:	f001 fc04 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_X_GPIO_Port, SEG1_X_Pin, SET);
 8000616:	2201      	movs	r2, #1
 8000618:	f44f 7180 	mov.w	r1, #256	; 0x100
 800061c:	4852      	ldr	r0, [pc, #328]	; (8000768 <display7SEG_X+0x394>)
 800061e:	f001 fbfe 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_X_GPIO_Port, SEG2_X_Pin, RESET);
 8000622:	2200      	movs	r2, #0
 8000624:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000628:	484f      	ldr	r0, [pc, #316]	; (8000768 <display7SEG_X+0x394>)
 800062a:	f001 fbf8 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_X_GPIO_Port, SEG3_X_Pin, RESET);
 800062e:	2200      	movs	r2, #0
 8000630:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000634:	484c      	ldr	r0, [pc, #304]	; (8000768 <display7SEG_X+0x394>)
 8000636:	f001 fbf2 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_X_GPIO_Port, SEG4_X_Pin, RESET);
 800063a:	2200      	movs	r2, #0
 800063c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000640:	4849      	ldr	r0, [pc, #292]	; (8000768 <display7SEG_X+0x394>)
 8000642:	f001 fbec 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_X_GPIO_Port, SEG5_X_Pin, RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800064c:	4846      	ldr	r0, [pc, #280]	; (8000768 <display7SEG_X+0x394>)
 800064e:	f001 fbe6 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_X_GPIO_Port, SEG6_X_Pin, RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000658:	4843      	ldr	r0, [pc, #268]	; (8000768 <display7SEG_X+0x394>)
 800065a:	f001 fbe0 	bl	8001e1e <HAL_GPIO_WritePin>
		break;
 800065e:	e07e      	b.n	800075e <display7SEG_X+0x38a>
	case 7:
		HAL_GPIO_WritePin(SEG0_X_GPIO_Port, SEG0_X_Pin, RESET);
 8000660:	2200      	movs	r2, #0
 8000662:	2180      	movs	r1, #128	; 0x80
 8000664:	4840      	ldr	r0, [pc, #256]	; (8000768 <display7SEG_X+0x394>)
 8000666:	f001 fbda 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_X_GPIO_Port, SEG1_X_Pin, RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000670:	483d      	ldr	r0, [pc, #244]	; (8000768 <display7SEG_X+0x394>)
 8000672:	f001 fbd4 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_X_GPIO_Port, SEG2_X_Pin, RESET);
 8000676:	2200      	movs	r2, #0
 8000678:	f44f 7100 	mov.w	r1, #512	; 0x200
 800067c:	483a      	ldr	r0, [pc, #232]	; (8000768 <display7SEG_X+0x394>)
 800067e:	f001 fbce 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_X_GPIO_Port, SEG3_X_Pin, SET);
 8000682:	2201      	movs	r2, #1
 8000684:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000688:	4837      	ldr	r0, [pc, #220]	; (8000768 <display7SEG_X+0x394>)
 800068a:	f001 fbc8 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_X_GPIO_Port, SEG4_X_Pin, SET);
 800068e:	2201      	movs	r2, #1
 8000690:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000694:	4834      	ldr	r0, [pc, #208]	; (8000768 <display7SEG_X+0x394>)
 8000696:	f001 fbc2 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_X_GPIO_Port, SEG5_X_Pin, SET);
 800069a:	2201      	movs	r2, #1
 800069c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006a0:	4831      	ldr	r0, [pc, #196]	; (8000768 <display7SEG_X+0x394>)
 80006a2:	f001 fbbc 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_X_GPIO_Port, SEG6_X_Pin, SET);
 80006a6:	2201      	movs	r2, #1
 80006a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ac:	482e      	ldr	r0, [pc, #184]	; (8000768 <display7SEG_X+0x394>)
 80006ae:	f001 fbb6 	bl	8001e1e <HAL_GPIO_WritePin>
		break;
 80006b2:	e054      	b.n	800075e <display7SEG_X+0x38a>
	case 8:
		HAL_GPIO_WritePin(SEG0_X_GPIO_Port, SEG0_X_Pin, RESET);
 80006b4:	2200      	movs	r2, #0
 80006b6:	2180      	movs	r1, #128	; 0x80
 80006b8:	482b      	ldr	r0, [pc, #172]	; (8000768 <display7SEG_X+0x394>)
 80006ba:	f001 fbb0 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_X_GPIO_Port, SEG1_X_Pin, RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006c4:	4828      	ldr	r0, [pc, #160]	; (8000768 <display7SEG_X+0x394>)
 80006c6:	f001 fbaa 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_X_GPIO_Port, SEG2_X_Pin, RESET);
 80006ca:	2200      	movs	r2, #0
 80006cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006d0:	4825      	ldr	r0, [pc, #148]	; (8000768 <display7SEG_X+0x394>)
 80006d2:	f001 fba4 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_X_GPIO_Port, SEG3_X_Pin, RESET);
 80006d6:	2200      	movs	r2, #0
 80006d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006dc:	4822      	ldr	r0, [pc, #136]	; (8000768 <display7SEG_X+0x394>)
 80006de:	f001 fb9e 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_X_GPIO_Port, SEG4_X_Pin, RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006e8:	481f      	ldr	r0, [pc, #124]	; (8000768 <display7SEG_X+0x394>)
 80006ea:	f001 fb98 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_X_GPIO_Port, SEG5_X_Pin, RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006f4:	481c      	ldr	r0, [pc, #112]	; (8000768 <display7SEG_X+0x394>)
 80006f6:	f001 fb92 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_X_GPIO_Port, SEG6_X_Pin, RESET);
 80006fa:	2200      	movs	r2, #0
 80006fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000700:	4819      	ldr	r0, [pc, #100]	; (8000768 <display7SEG_X+0x394>)
 8000702:	f001 fb8c 	bl	8001e1e <HAL_GPIO_WritePin>
		break;
 8000706:	e02a      	b.n	800075e <display7SEG_X+0x38a>
	case 9:
		HAL_GPIO_WritePin(SEG0_X_GPIO_Port, SEG0_X_Pin, RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	2180      	movs	r1, #128	; 0x80
 800070c:	4816      	ldr	r0, [pc, #88]	; (8000768 <display7SEG_X+0x394>)
 800070e:	f001 fb86 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_X_GPIO_Port, SEG1_X_Pin, RESET);
 8000712:	2200      	movs	r2, #0
 8000714:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000718:	4813      	ldr	r0, [pc, #76]	; (8000768 <display7SEG_X+0x394>)
 800071a:	f001 fb80 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_X_GPIO_Port, SEG2_X_Pin, RESET);
 800071e:	2200      	movs	r2, #0
 8000720:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000724:	4810      	ldr	r0, [pc, #64]	; (8000768 <display7SEG_X+0x394>)
 8000726:	f001 fb7a 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_X_GPIO_Port, SEG3_X_Pin, RESET);
 800072a:	2200      	movs	r2, #0
 800072c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000730:	480d      	ldr	r0, [pc, #52]	; (8000768 <display7SEG_X+0x394>)
 8000732:	f001 fb74 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_X_GPIO_Port, SEG4_X_Pin, SET);
 8000736:	2201      	movs	r2, #1
 8000738:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800073c:	480a      	ldr	r0, [pc, #40]	; (8000768 <display7SEG_X+0x394>)
 800073e:	f001 fb6e 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_X_GPIO_Port, SEG5_X_Pin, RESET);
 8000742:	2200      	movs	r2, #0
 8000744:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000748:	4807      	ldr	r0, [pc, #28]	; (8000768 <display7SEG_X+0x394>)
 800074a:	f001 fb68 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_X_GPIO_Port, SEG6_X_Pin, RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000754:	4804      	ldr	r0, [pc, #16]	; (8000768 <display7SEG_X+0x394>)
 8000756:	f001 fb62 	bl	8001e1e <HAL_GPIO_WritePin>
		break;
 800075a:	e000      	b.n	800075e <display7SEG_X+0x38a>
	default:
		break;
 800075c:	bf00      	nop
	}
}
 800075e:	bf00      	nop
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40010800 	.word	0x40010800

0800076c <display7SEG_Y>:

void display7SEG_Y(int number){
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2b09      	cmp	r3, #9
 8000778:	f200 8180 	bhi.w	8000a7c <display7SEG_Y+0x310>
 800077c:	a201      	add	r2, pc, #4	; (adr r2, 8000784 <display7SEG_Y+0x18>)
 800077e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000782:	bf00      	nop
 8000784:	080007ad 	.word	0x080007ad
 8000788:	080007f5 	.word	0x080007f5
 800078c:	0800083d 	.word	0x0800083d
 8000790:	08000885 	.word	0x08000885
 8000794:	080008cd 	.word	0x080008cd
 8000798:	08000915 	.word	0x08000915
 800079c:	0800095d 	.word	0x0800095d
 80007a0:	080009a5 	.word	0x080009a5
 80007a4:	080009ed 	.word	0x080009ed
 80007a8:	08000a35 	.word	0x08000a35
	switch(number){
	case 0:
		HAL_GPIO_WritePin(SEG0_Y_GPIO_Port, SEG0_Y_Pin, RESET);
 80007ac:	2200      	movs	r2, #0
 80007ae:	2101      	movs	r1, #1
 80007b0:	48b5      	ldr	r0, [pc, #724]	; (8000a88 <display7SEG_Y+0x31c>)
 80007b2:	f001 fb34 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_Y_GPIO_Port, SEG1_Y_Pin, RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2102      	movs	r1, #2
 80007ba:	48b3      	ldr	r0, [pc, #716]	; (8000a88 <display7SEG_Y+0x31c>)
 80007bc:	f001 fb2f 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_Y_GPIO_Port, SEG2_Y_Pin, RESET);
 80007c0:	2200      	movs	r2, #0
 80007c2:	2104      	movs	r1, #4
 80007c4:	48b0      	ldr	r0, [pc, #704]	; (8000a88 <display7SEG_Y+0x31c>)
 80007c6:	f001 fb2a 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_Y_GPIO_Port, SEG3_Y_Pin, RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2108      	movs	r1, #8
 80007ce:	48ae      	ldr	r0, [pc, #696]	; (8000a88 <display7SEG_Y+0x31c>)
 80007d0:	f001 fb25 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_Y_GPIO_Port, SEG4_Y_Pin, RESET);
 80007d4:	2200      	movs	r2, #0
 80007d6:	2110      	movs	r1, #16
 80007d8:	48ab      	ldr	r0, [pc, #684]	; (8000a88 <display7SEG_Y+0x31c>)
 80007da:	f001 fb20 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_Y_GPIO_Port, SEG5_Y_Pin, RESET);
 80007de:	2200      	movs	r2, #0
 80007e0:	2120      	movs	r1, #32
 80007e2:	48a9      	ldr	r0, [pc, #676]	; (8000a88 <display7SEG_Y+0x31c>)
 80007e4:	f001 fb1b 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_Y_GPIO_Port, SEG6_Y_Pin, SET);
 80007e8:	2201      	movs	r2, #1
 80007ea:	2140      	movs	r1, #64	; 0x40
 80007ec:	48a6      	ldr	r0, [pc, #664]	; (8000a88 <display7SEG_Y+0x31c>)
 80007ee:	f001 fb16 	bl	8001e1e <HAL_GPIO_WritePin>
		break;
 80007f2:	e144      	b.n	8000a7e <display7SEG_Y+0x312>
	case 1:
		HAL_GPIO_WritePin(SEG0_Y_GPIO_Port, SEG0_Y_Pin, SET);
 80007f4:	2201      	movs	r2, #1
 80007f6:	2101      	movs	r1, #1
 80007f8:	48a3      	ldr	r0, [pc, #652]	; (8000a88 <display7SEG_Y+0x31c>)
 80007fa:	f001 fb10 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_Y_GPIO_Port, SEG1_Y_Pin, RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	2102      	movs	r1, #2
 8000802:	48a1      	ldr	r0, [pc, #644]	; (8000a88 <display7SEG_Y+0x31c>)
 8000804:	f001 fb0b 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_Y_GPIO_Port, SEG2_Y_Pin, RESET);
 8000808:	2200      	movs	r2, #0
 800080a:	2104      	movs	r1, #4
 800080c:	489e      	ldr	r0, [pc, #632]	; (8000a88 <display7SEG_Y+0x31c>)
 800080e:	f001 fb06 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_Y_GPIO_Port, SEG3_Y_Pin, SET);
 8000812:	2201      	movs	r2, #1
 8000814:	2108      	movs	r1, #8
 8000816:	489c      	ldr	r0, [pc, #624]	; (8000a88 <display7SEG_Y+0x31c>)
 8000818:	f001 fb01 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_Y_GPIO_Port, SEG4_Y_Pin, SET);
 800081c:	2201      	movs	r2, #1
 800081e:	2110      	movs	r1, #16
 8000820:	4899      	ldr	r0, [pc, #612]	; (8000a88 <display7SEG_Y+0x31c>)
 8000822:	f001 fafc 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_Y_GPIO_Port, SEG5_Y_Pin, SET);
 8000826:	2201      	movs	r2, #1
 8000828:	2120      	movs	r1, #32
 800082a:	4897      	ldr	r0, [pc, #604]	; (8000a88 <display7SEG_Y+0x31c>)
 800082c:	f001 faf7 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_Y_GPIO_Port, SEG6_Y_Pin, SET);
 8000830:	2201      	movs	r2, #1
 8000832:	2140      	movs	r1, #64	; 0x40
 8000834:	4894      	ldr	r0, [pc, #592]	; (8000a88 <display7SEG_Y+0x31c>)
 8000836:	f001 faf2 	bl	8001e1e <HAL_GPIO_WritePin>
		break;
 800083a:	e120      	b.n	8000a7e <display7SEG_Y+0x312>
	case 2:
		HAL_GPIO_WritePin(SEG0_Y_GPIO_Port, SEG0_Y_Pin, RESET);
 800083c:	2200      	movs	r2, #0
 800083e:	2101      	movs	r1, #1
 8000840:	4891      	ldr	r0, [pc, #580]	; (8000a88 <display7SEG_Y+0x31c>)
 8000842:	f001 faec 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_Y_GPIO_Port, SEG1_Y_Pin, RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	2102      	movs	r1, #2
 800084a:	488f      	ldr	r0, [pc, #572]	; (8000a88 <display7SEG_Y+0x31c>)
 800084c:	f001 fae7 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_Y_GPIO_Port, SEG2_Y_Pin, SET);
 8000850:	2201      	movs	r2, #1
 8000852:	2104      	movs	r1, #4
 8000854:	488c      	ldr	r0, [pc, #560]	; (8000a88 <display7SEG_Y+0x31c>)
 8000856:	f001 fae2 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_Y_GPIO_Port, SEG3_Y_Pin, RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	2108      	movs	r1, #8
 800085e:	488a      	ldr	r0, [pc, #552]	; (8000a88 <display7SEG_Y+0x31c>)
 8000860:	f001 fadd 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_Y_GPIO_Port, SEG4_Y_Pin, RESET);
 8000864:	2200      	movs	r2, #0
 8000866:	2110      	movs	r1, #16
 8000868:	4887      	ldr	r0, [pc, #540]	; (8000a88 <display7SEG_Y+0x31c>)
 800086a:	f001 fad8 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_Y_GPIO_Port, SEG5_Y_Pin, SET);
 800086e:	2201      	movs	r2, #1
 8000870:	2120      	movs	r1, #32
 8000872:	4885      	ldr	r0, [pc, #532]	; (8000a88 <display7SEG_Y+0x31c>)
 8000874:	f001 fad3 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_Y_GPIO_Port, SEG6_Y_Pin, RESET);
 8000878:	2200      	movs	r2, #0
 800087a:	2140      	movs	r1, #64	; 0x40
 800087c:	4882      	ldr	r0, [pc, #520]	; (8000a88 <display7SEG_Y+0x31c>)
 800087e:	f001 face 	bl	8001e1e <HAL_GPIO_WritePin>
		break;
 8000882:	e0fc      	b.n	8000a7e <display7SEG_Y+0x312>
	case 3:
		HAL_GPIO_WritePin(SEG0_Y_GPIO_Port, SEG0_Y_Pin, RESET);
 8000884:	2200      	movs	r2, #0
 8000886:	2101      	movs	r1, #1
 8000888:	487f      	ldr	r0, [pc, #508]	; (8000a88 <display7SEG_Y+0x31c>)
 800088a:	f001 fac8 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_Y_GPIO_Port, SEG1_Y_Pin, RESET);
 800088e:	2200      	movs	r2, #0
 8000890:	2102      	movs	r1, #2
 8000892:	487d      	ldr	r0, [pc, #500]	; (8000a88 <display7SEG_Y+0x31c>)
 8000894:	f001 fac3 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_Y_GPIO_Port, SEG2_Y_Pin, RESET);
 8000898:	2200      	movs	r2, #0
 800089a:	2104      	movs	r1, #4
 800089c:	487a      	ldr	r0, [pc, #488]	; (8000a88 <display7SEG_Y+0x31c>)
 800089e:	f001 fabe 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_Y_GPIO_Port, SEG3_Y_Pin, RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2108      	movs	r1, #8
 80008a6:	4878      	ldr	r0, [pc, #480]	; (8000a88 <display7SEG_Y+0x31c>)
 80008a8:	f001 fab9 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_Y_GPIO_Port, SEG4_Y_Pin, SET);
 80008ac:	2201      	movs	r2, #1
 80008ae:	2110      	movs	r1, #16
 80008b0:	4875      	ldr	r0, [pc, #468]	; (8000a88 <display7SEG_Y+0x31c>)
 80008b2:	f001 fab4 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_Y_GPIO_Port, SEG5_Y_Pin, SET);
 80008b6:	2201      	movs	r2, #1
 80008b8:	2120      	movs	r1, #32
 80008ba:	4873      	ldr	r0, [pc, #460]	; (8000a88 <display7SEG_Y+0x31c>)
 80008bc:	f001 faaf 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_Y_GPIO_Port, SEG6_Y_Pin, RESET);
 80008c0:	2200      	movs	r2, #0
 80008c2:	2140      	movs	r1, #64	; 0x40
 80008c4:	4870      	ldr	r0, [pc, #448]	; (8000a88 <display7SEG_Y+0x31c>)
 80008c6:	f001 faaa 	bl	8001e1e <HAL_GPIO_WritePin>
		break;
 80008ca:	e0d8      	b.n	8000a7e <display7SEG_Y+0x312>
	case 4:
		HAL_GPIO_WritePin(SEG0_Y_GPIO_Port, SEG0_Y_Pin, SET);
 80008cc:	2201      	movs	r2, #1
 80008ce:	2101      	movs	r1, #1
 80008d0:	486d      	ldr	r0, [pc, #436]	; (8000a88 <display7SEG_Y+0x31c>)
 80008d2:	f001 faa4 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_Y_GPIO_Port, SEG1_Y_Pin, RESET);
 80008d6:	2200      	movs	r2, #0
 80008d8:	2102      	movs	r1, #2
 80008da:	486b      	ldr	r0, [pc, #428]	; (8000a88 <display7SEG_Y+0x31c>)
 80008dc:	f001 fa9f 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_Y_GPIO_Port, SEG2_Y_Pin, RESET);
 80008e0:	2200      	movs	r2, #0
 80008e2:	2104      	movs	r1, #4
 80008e4:	4868      	ldr	r0, [pc, #416]	; (8000a88 <display7SEG_Y+0x31c>)
 80008e6:	f001 fa9a 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_Y_GPIO_Port, SEG3_Y_Pin, SET);
 80008ea:	2201      	movs	r2, #1
 80008ec:	2108      	movs	r1, #8
 80008ee:	4866      	ldr	r0, [pc, #408]	; (8000a88 <display7SEG_Y+0x31c>)
 80008f0:	f001 fa95 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_Y_GPIO_Port, SEG4_Y_Pin, SET);
 80008f4:	2201      	movs	r2, #1
 80008f6:	2110      	movs	r1, #16
 80008f8:	4863      	ldr	r0, [pc, #396]	; (8000a88 <display7SEG_Y+0x31c>)
 80008fa:	f001 fa90 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_Y_GPIO_Port, SEG5_Y_Pin, RESET);
 80008fe:	2200      	movs	r2, #0
 8000900:	2120      	movs	r1, #32
 8000902:	4861      	ldr	r0, [pc, #388]	; (8000a88 <display7SEG_Y+0x31c>)
 8000904:	f001 fa8b 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_Y_GPIO_Port, SEG6_Y_Pin, RESET);
 8000908:	2200      	movs	r2, #0
 800090a:	2140      	movs	r1, #64	; 0x40
 800090c:	485e      	ldr	r0, [pc, #376]	; (8000a88 <display7SEG_Y+0x31c>)
 800090e:	f001 fa86 	bl	8001e1e <HAL_GPIO_WritePin>
		break;
 8000912:	e0b4      	b.n	8000a7e <display7SEG_Y+0x312>
	case 5:
		HAL_GPIO_WritePin(SEG0_Y_GPIO_Port, SEG0_Y_Pin, RESET);
 8000914:	2200      	movs	r2, #0
 8000916:	2101      	movs	r1, #1
 8000918:	485b      	ldr	r0, [pc, #364]	; (8000a88 <display7SEG_Y+0x31c>)
 800091a:	f001 fa80 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_Y_GPIO_Port, SEG1_Y_Pin, SET);
 800091e:	2201      	movs	r2, #1
 8000920:	2102      	movs	r1, #2
 8000922:	4859      	ldr	r0, [pc, #356]	; (8000a88 <display7SEG_Y+0x31c>)
 8000924:	f001 fa7b 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_Y_GPIO_Port, SEG2_Y_Pin, RESET);
 8000928:	2200      	movs	r2, #0
 800092a:	2104      	movs	r1, #4
 800092c:	4856      	ldr	r0, [pc, #344]	; (8000a88 <display7SEG_Y+0x31c>)
 800092e:	f001 fa76 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_Y_GPIO_Port, SEG3_Y_Pin, RESET);
 8000932:	2200      	movs	r2, #0
 8000934:	2108      	movs	r1, #8
 8000936:	4854      	ldr	r0, [pc, #336]	; (8000a88 <display7SEG_Y+0x31c>)
 8000938:	f001 fa71 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_Y_GPIO_Port, SEG4_Y_Pin, SET);
 800093c:	2201      	movs	r2, #1
 800093e:	2110      	movs	r1, #16
 8000940:	4851      	ldr	r0, [pc, #324]	; (8000a88 <display7SEG_Y+0x31c>)
 8000942:	f001 fa6c 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_Y_GPIO_Port, SEG5_Y_Pin, RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	2120      	movs	r1, #32
 800094a:	484f      	ldr	r0, [pc, #316]	; (8000a88 <display7SEG_Y+0x31c>)
 800094c:	f001 fa67 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_Y_GPIO_Port, SEG6_Y_Pin, RESET);
 8000950:	2200      	movs	r2, #0
 8000952:	2140      	movs	r1, #64	; 0x40
 8000954:	484c      	ldr	r0, [pc, #304]	; (8000a88 <display7SEG_Y+0x31c>)
 8000956:	f001 fa62 	bl	8001e1e <HAL_GPIO_WritePin>
		break;
 800095a:	e090      	b.n	8000a7e <display7SEG_Y+0x312>
	case 6:
		HAL_GPIO_WritePin(SEG0_Y_GPIO_Port, SEG0_Y_Pin, RESET);
 800095c:	2200      	movs	r2, #0
 800095e:	2101      	movs	r1, #1
 8000960:	4849      	ldr	r0, [pc, #292]	; (8000a88 <display7SEG_Y+0x31c>)
 8000962:	f001 fa5c 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_Y_GPIO_Port, SEG1_Y_Pin, SET);
 8000966:	2201      	movs	r2, #1
 8000968:	2102      	movs	r1, #2
 800096a:	4847      	ldr	r0, [pc, #284]	; (8000a88 <display7SEG_Y+0x31c>)
 800096c:	f001 fa57 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_Y_GPIO_Port, SEG2_Y_Pin, RESET);
 8000970:	2200      	movs	r2, #0
 8000972:	2104      	movs	r1, #4
 8000974:	4844      	ldr	r0, [pc, #272]	; (8000a88 <display7SEG_Y+0x31c>)
 8000976:	f001 fa52 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_Y_GPIO_Port, SEG3_Y_Pin, RESET);
 800097a:	2200      	movs	r2, #0
 800097c:	2108      	movs	r1, #8
 800097e:	4842      	ldr	r0, [pc, #264]	; (8000a88 <display7SEG_Y+0x31c>)
 8000980:	f001 fa4d 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_Y_GPIO_Port, SEG4_Y_Pin, RESET);
 8000984:	2200      	movs	r2, #0
 8000986:	2110      	movs	r1, #16
 8000988:	483f      	ldr	r0, [pc, #252]	; (8000a88 <display7SEG_Y+0x31c>)
 800098a:	f001 fa48 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_Y_GPIO_Port, SEG5_Y_Pin, RESET);
 800098e:	2200      	movs	r2, #0
 8000990:	2120      	movs	r1, #32
 8000992:	483d      	ldr	r0, [pc, #244]	; (8000a88 <display7SEG_Y+0x31c>)
 8000994:	f001 fa43 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_Y_GPIO_Port, SEG6_Y_Pin, RESET);
 8000998:	2200      	movs	r2, #0
 800099a:	2140      	movs	r1, #64	; 0x40
 800099c:	483a      	ldr	r0, [pc, #232]	; (8000a88 <display7SEG_Y+0x31c>)
 800099e:	f001 fa3e 	bl	8001e1e <HAL_GPIO_WritePin>
		break;
 80009a2:	e06c      	b.n	8000a7e <display7SEG_Y+0x312>
	case 7:
		HAL_GPIO_WritePin(SEG0_Y_GPIO_Port, SEG0_Y_Pin, RESET);
 80009a4:	2200      	movs	r2, #0
 80009a6:	2101      	movs	r1, #1
 80009a8:	4837      	ldr	r0, [pc, #220]	; (8000a88 <display7SEG_Y+0x31c>)
 80009aa:	f001 fa38 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_Y_GPIO_Port, SEG1_Y_Pin, RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2102      	movs	r1, #2
 80009b2:	4835      	ldr	r0, [pc, #212]	; (8000a88 <display7SEG_Y+0x31c>)
 80009b4:	f001 fa33 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_Y_GPIO_Port, SEG2_Y_Pin, RESET);
 80009b8:	2200      	movs	r2, #0
 80009ba:	2104      	movs	r1, #4
 80009bc:	4832      	ldr	r0, [pc, #200]	; (8000a88 <display7SEG_Y+0x31c>)
 80009be:	f001 fa2e 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_Y_GPIO_Port, SEG3_Y_Pin, SET);
 80009c2:	2201      	movs	r2, #1
 80009c4:	2108      	movs	r1, #8
 80009c6:	4830      	ldr	r0, [pc, #192]	; (8000a88 <display7SEG_Y+0x31c>)
 80009c8:	f001 fa29 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_Y_GPIO_Port, SEG4_Y_Pin, SET);
 80009cc:	2201      	movs	r2, #1
 80009ce:	2110      	movs	r1, #16
 80009d0:	482d      	ldr	r0, [pc, #180]	; (8000a88 <display7SEG_Y+0x31c>)
 80009d2:	f001 fa24 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_Y_GPIO_Port, SEG5_Y_Pin, SET);
 80009d6:	2201      	movs	r2, #1
 80009d8:	2120      	movs	r1, #32
 80009da:	482b      	ldr	r0, [pc, #172]	; (8000a88 <display7SEG_Y+0x31c>)
 80009dc:	f001 fa1f 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_Y_GPIO_Port, SEG6_Y_Pin, SET);
 80009e0:	2201      	movs	r2, #1
 80009e2:	2140      	movs	r1, #64	; 0x40
 80009e4:	4828      	ldr	r0, [pc, #160]	; (8000a88 <display7SEG_Y+0x31c>)
 80009e6:	f001 fa1a 	bl	8001e1e <HAL_GPIO_WritePin>
		break;
 80009ea:	e048      	b.n	8000a7e <display7SEG_Y+0x312>
	case 8:
		HAL_GPIO_WritePin(SEG0_Y_GPIO_Port, SEG0_Y_Pin, RESET);
 80009ec:	2200      	movs	r2, #0
 80009ee:	2101      	movs	r1, #1
 80009f0:	4825      	ldr	r0, [pc, #148]	; (8000a88 <display7SEG_Y+0x31c>)
 80009f2:	f001 fa14 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_Y_GPIO_Port, SEG1_Y_Pin, RESET);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2102      	movs	r1, #2
 80009fa:	4823      	ldr	r0, [pc, #140]	; (8000a88 <display7SEG_Y+0x31c>)
 80009fc:	f001 fa0f 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_Y_GPIO_Port, SEG2_Y_Pin, RESET);
 8000a00:	2200      	movs	r2, #0
 8000a02:	2104      	movs	r1, #4
 8000a04:	4820      	ldr	r0, [pc, #128]	; (8000a88 <display7SEG_Y+0x31c>)
 8000a06:	f001 fa0a 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_Y_GPIO_Port, SEG3_Y_Pin, RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2108      	movs	r1, #8
 8000a0e:	481e      	ldr	r0, [pc, #120]	; (8000a88 <display7SEG_Y+0x31c>)
 8000a10:	f001 fa05 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_Y_GPIO_Port, SEG4_Y_Pin, RESET);
 8000a14:	2200      	movs	r2, #0
 8000a16:	2110      	movs	r1, #16
 8000a18:	481b      	ldr	r0, [pc, #108]	; (8000a88 <display7SEG_Y+0x31c>)
 8000a1a:	f001 fa00 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_Y_GPIO_Port, SEG5_Y_Pin, RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2120      	movs	r1, #32
 8000a22:	4819      	ldr	r0, [pc, #100]	; (8000a88 <display7SEG_Y+0x31c>)
 8000a24:	f001 f9fb 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_Y_GPIO_Port, SEG6_Y_Pin, RESET);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2140      	movs	r1, #64	; 0x40
 8000a2c:	4816      	ldr	r0, [pc, #88]	; (8000a88 <display7SEG_Y+0x31c>)
 8000a2e:	f001 f9f6 	bl	8001e1e <HAL_GPIO_WritePin>
		break;
 8000a32:	e024      	b.n	8000a7e <display7SEG_Y+0x312>
	case 9:
		HAL_GPIO_WritePin(SEG0_Y_GPIO_Port, SEG0_Y_Pin, RESET);
 8000a34:	2200      	movs	r2, #0
 8000a36:	2101      	movs	r1, #1
 8000a38:	4813      	ldr	r0, [pc, #76]	; (8000a88 <display7SEG_Y+0x31c>)
 8000a3a:	f001 f9f0 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_Y_GPIO_Port, SEG1_Y_Pin, RESET);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2102      	movs	r1, #2
 8000a42:	4811      	ldr	r0, [pc, #68]	; (8000a88 <display7SEG_Y+0x31c>)
 8000a44:	f001 f9eb 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_Y_GPIO_Port, SEG2_Y_Pin, RESET);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2104      	movs	r1, #4
 8000a4c:	480e      	ldr	r0, [pc, #56]	; (8000a88 <display7SEG_Y+0x31c>)
 8000a4e:	f001 f9e6 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_Y_GPIO_Port, SEG3_Y_Pin, RESET);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2108      	movs	r1, #8
 8000a56:	480c      	ldr	r0, [pc, #48]	; (8000a88 <display7SEG_Y+0x31c>)
 8000a58:	f001 f9e1 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_Y_GPIO_Port, SEG4_Y_Pin, SET);
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	2110      	movs	r1, #16
 8000a60:	4809      	ldr	r0, [pc, #36]	; (8000a88 <display7SEG_Y+0x31c>)
 8000a62:	f001 f9dc 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_Y_GPIO_Port, SEG5_Y_Pin, RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2120      	movs	r1, #32
 8000a6a:	4807      	ldr	r0, [pc, #28]	; (8000a88 <display7SEG_Y+0x31c>)
 8000a6c:	f001 f9d7 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_Y_GPIO_Port, SEG6_Y_Pin, RESET);
 8000a70:	2200      	movs	r2, #0
 8000a72:	2140      	movs	r1, #64	; 0x40
 8000a74:	4804      	ldr	r0, [pc, #16]	; (8000a88 <display7SEG_Y+0x31c>)
 8000a76:	f001 f9d2 	bl	8001e1e <HAL_GPIO_WritePin>
		break;
 8000a7a:	e000      	b.n	8000a7e <display7SEG_Y+0x312>
	default:
		break;
 8000a7c:	bf00      	nop
	}
}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40010c00 	.word	0x40010c00

08000a8c <update7SEG>:
	default:
		break;
	}
}

void update7SEG(int index){
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
	switch(index){
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d003      	beq.n	8000aa2 <update7SEG+0x16>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d022      	beq.n	8000ae6 <update7SEG+0x5a>
		HAL_GPIO_WritePin(EN1_Y_GPIO_Port, EN1_Y_Pin, RESET);
		display7SEG_Y(led_buffer_Y[1]);
		display7SEG_X(led_buffer_X[1]);
		break;
	default:
		break;
 8000aa0:	e043      	b.n	8000b2a <update7SEG+0x9e>
		HAL_GPIO_WritePin(EN0_X_GPIO_Port, EN0_X_Pin, RESET);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000aa8:	4822      	ldr	r0, [pc, #136]	; (8000b34 <update7SEG+0xa8>)
 8000aaa:	f001 f9b8 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_X_GPIO_Port, EN1_X_Pin, SET);
 8000aae:	2201      	movs	r2, #1
 8000ab0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ab4:	481f      	ldr	r0, [pc, #124]	; (8000b34 <update7SEG+0xa8>)
 8000ab6:	f001 f9b2 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN0_Y_GPIO_Port, EN0_Y_Pin, RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2180      	movs	r1, #128	; 0x80
 8000abe:	481e      	ldr	r0, [pc, #120]	; (8000b38 <update7SEG+0xac>)
 8000ac0:	f001 f9ad 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_Y_GPIO_Port, EN1_Y_Pin, SET);
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aca:	481b      	ldr	r0, [pc, #108]	; (8000b38 <update7SEG+0xac>)
 8000acc:	f001 f9a7 	bl	8001e1e <HAL_GPIO_WritePin>
		display7SEG_Y(led_buffer_Y[0]);
 8000ad0:	4b1a      	ldr	r3, [pc, #104]	; (8000b3c <update7SEG+0xb0>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff fe49 	bl	800076c <display7SEG_Y>
		display7SEG_X(led_buffer_X[0]);
 8000ada:	4b19      	ldr	r3, [pc, #100]	; (8000b40 <update7SEG+0xb4>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f7ff fc78 	bl	80003d4 <display7SEG_X>
		break;
 8000ae4:	e021      	b.n	8000b2a <update7SEG+0x9e>
		HAL_GPIO_WritePin(EN0_X_GPIO_Port, EN0_X_Pin, SET);
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000aec:	4811      	ldr	r0, [pc, #68]	; (8000b34 <update7SEG+0xa8>)
 8000aee:	f001 f996 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_X_GPIO_Port, EN1_X_Pin, RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000af8:	480e      	ldr	r0, [pc, #56]	; (8000b34 <update7SEG+0xa8>)
 8000afa:	f001 f990 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN0_Y_GPIO_Port, EN0_Y_Pin, SET);
 8000afe:	2201      	movs	r2, #1
 8000b00:	2180      	movs	r1, #128	; 0x80
 8000b02:	480d      	ldr	r0, [pc, #52]	; (8000b38 <update7SEG+0xac>)
 8000b04:	f001 f98b 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_Y_GPIO_Port, EN1_Y_Pin, RESET);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b0e:	480a      	ldr	r0, [pc, #40]	; (8000b38 <update7SEG+0xac>)
 8000b10:	f001 f985 	bl	8001e1e <HAL_GPIO_WritePin>
		display7SEG_Y(led_buffer_Y[1]);
 8000b14:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <update7SEG+0xb0>)
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff fe27 	bl	800076c <display7SEG_Y>
		display7SEG_X(led_buffer_X[1]);
 8000b1e:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <update7SEG+0xb4>)
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff fc56 	bl	80003d4 <display7SEG_X>
		break;
 8000b28:	bf00      	nop
	}
}
 8000b2a:	bf00      	nop
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40010800 	.word	0x40010800
 8000b38:	40010c00 	.word	0x40010c00
 8000b3c:	2000008c 	.word	0x2000008c
 8000b40:	20000084 	.word	0x20000084

08000b44 <updateBuffer>:
		}
		setTimer_Sweeper_Y(25);
	}
}

void updateBuffer(int second_X, int second_Y){
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	6039      	str	r1, [r7, #0]
	if (second_X < 10){
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2b09      	cmp	r3, #9
 8000b52:	dc05      	bgt.n	8000b60 <updateBuffer+0x1c>
		led_buffer_X[0] = 0;
 8000b54:	4b2e      	ldr	r3, [pc, #184]	; (8000c10 <updateBuffer+0xcc>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
		led_buffer_X[1] = second_X;
 8000b5a:	4a2d      	ldr	r2, [pc, #180]	; (8000c10 <updateBuffer+0xcc>)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	6053      	str	r3, [r2, #4]
	}
	if (second_X >= 10){
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2b09      	cmp	r3, #9
 8000b64:	dd16      	ble.n	8000b94 <updateBuffer+0x50>
		led_buffer_X[0] = second_X / 10;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4a2a      	ldr	r2, [pc, #168]	; (8000c14 <updateBuffer+0xd0>)
 8000b6a:	fb82 1203 	smull	r1, r2, r2, r3
 8000b6e:	1092      	asrs	r2, r2, #2
 8000b70:	17db      	asrs	r3, r3, #31
 8000b72:	1ad3      	subs	r3, r2, r3
 8000b74:	4a26      	ldr	r2, [pc, #152]	; (8000c10 <updateBuffer+0xcc>)
 8000b76:	6013      	str	r3, [r2, #0]
		led_buffer_X[1] = second_X % 10;
 8000b78:	6879      	ldr	r1, [r7, #4]
 8000b7a:	4b26      	ldr	r3, [pc, #152]	; (8000c14 <updateBuffer+0xd0>)
 8000b7c:	fb83 2301 	smull	r2, r3, r3, r1
 8000b80:	109a      	asrs	r2, r3, #2
 8000b82:	17cb      	asrs	r3, r1, #31
 8000b84:	1ad2      	subs	r2, r2, r3
 8000b86:	4613      	mov	r3, r2
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	4413      	add	r3, r2
 8000b8c:	005b      	lsls	r3, r3, #1
 8000b8e:	1aca      	subs	r2, r1, r3
 8000b90:	4b1f      	ldr	r3, [pc, #124]	; (8000c10 <updateBuffer+0xcc>)
 8000b92:	605a      	str	r2, [r3, #4]
	}
	if (second_Y < 10){
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	2b09      	cmp	r3, #9
 8000b98:	dc05      	bgt.n	8000ba6 <updateBuffer+0x62>
		led_buffer_Y[0] = 0;
 8000b9a:	4b1f      	ldr	r3, [pc, #124]	; (8000c18 <updateBuffer+0xd4>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
		led_buffer_Y[1] = second_Y;
 8000ba0:	4a1d      	ldr	r2, [pc, #116]	; (8000c18 <updateBuffer+0xd4>)
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	6053      	str	r3, [r2, #4]
	}
	if (second_Y >= 10){
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	2b09      	cmp	r3, #9
 8000baa:	dd16      	ble.n	8000bda <updateBuffer+0x96>
		led_buffer_Y[0] = second_Y / 10;
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	4a19      	ldr	r2, [pc, #100]	; (8000c14 <updateBuffer+0xd0>)
 8000bb0:	fb82 1203 	smull	r1, r2, r2, r3
 8000bb4:	1092      	asrs	r2, r2, #2
 8000bb6:	17db      	asrs	r3, r3, #31
 8000bb8:	1ad3      	subs	r3, r2, r3
 8000bba:	4a17      	ldr	r2, [pc, #92]	; (8000c18 <updateBuffer+0xd4>)
 8000bbc:	6013      	str	r3, [r2, #0]
		led_buffer_Y[1] = second_Y % 10;
 8000bbe:	6839      	ldr	r1, [r7, #0]
 8000bc0:	4b14      	ldr	r3, [pc, #80]	; (8000c14 <updateBuffer+0xd0>)
 8000bc2:	fb83 2301 	smull	r2, r3, r3, r1
 8000bc6:	109a      	asrs	r2, r3, #2
 8000bc8:	17cb      	asrs	r3, r1, #31
 8000bca:	1ad2      	subs	r2, r2, r3
 8000bcc:	4613      	mov	r3, r2
 8000bce:	009b      	lsls	r3, r3, #2
 8000bd0:	4413      	add	r3, r2
 8000bd2:	005b      	lsls	r3, r3, #1
 8000bd4:	1aca      	subs	r2, r1, r3
 8000bd6:	4b10      	ldr	r3, [pc, #64]	; (8000c18 <updateBuffer+0xd4>)
 8000bd8:	605a      	str	r2, [r3, #4]
	}
	if(timer_flag_0 == 1){					//7SEG sweeper
 8000bda:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <updateBuffer+0xd8>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d111      	bne.n	8000c06 <updateBuffer+0xc2>
		update7SEG(index_led++);
 8000be2:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <updateBuffer+0xdc>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	1c5a      	adds	r2, r3, #1
 8000be8:	490d      	ldr	r1, [pc, #52]	; (8000c20 <updateBuffer+0xdc>)
 8000bea:	600a      	str	r2, [r1, #0]
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff ff4d 	bl	8000a8c <update7SEG>
		if (index_led > 1){
 8000bf2:	4b0b      	ldr	r3, [pc, #44]	; (8000c20 <updateBuffer+0xdc>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	dd02      	ble.n	8000c00 <updateBuffer+0xbc>
			index_led = 0;
 8000bfa:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <updateBuffer+0xdc>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
		}
		setTimer_Sweeper_X(25);
 8000c00:	2019      	movs	r0, #25
 8000c02:	f000 fc75 	bl	80014f0 <setTimer_Sweeper_X>
	}
}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000084 	.word	0x20000084
 8000c14:	66666667 	.word	0x66666667
 8000c18:	2000008c 	.word	0x2000008c
 8000c1c:	200000a8 	.word	0x200000a8
 8000c20:	20000080 	.word	0x20000080

08000c24 <countdown>:
#include "fsm_automatic.h"

int clock_X = 0;
int clock_Y = 0;

void countdown(void){
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
	if(timer_flag_3 == 1){
 8000c28:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <countdown+0x2c>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d10c      	bne.n	8000c4a <countdown+0x26>
		clock_X--;
 8000c30:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <countdown+0x30>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	3b01      	subs	r3, #1
 8000c36:	4a07      	ldr	r2, [pc, #28]	; (8000c54 <countdown+0x30>)
 8000c38:	6013      	str	r3, [r2, #0]
		clock_Y--;
 8000c3a:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <countdown+0x34>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	3b01      	subs	r3, #1
 8000c40:	4a05      	ldr	r2, [pc, #20]	; (8000c58 <countdown+0x34>)
 8000c42:	6013      	str	r3, [r2, #0]
		setTimer_Clock(100);
 8000c44:	2064      	movs	r0, #100	; 0x64
 8000c46:	f000 fc8f 	bl	8001568 <setTimer_Clock>
	}
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	200000b4 	.word	0x200000b4
 8000c54:	20000094 	.word	0x20000094
 8000c58:	20000098 	.word	0x20000098

08000c5c <fsm_automatic_run_X>:

void fsm_automatic_run_X(void){
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
	switch(status_X){
 8000c60:	4b51      	ldr	r3, [pc, #324]	; (8000da8 <fsm_automatic_run_X+0x14c>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	3b01      	subs	r3, #1
 8000c66:	2b03      	cmp	r3, #3
 8000c68:	f200 8094 	bhi.w	8000d94 <fsm_automatic_run_X+0x138>
 8000c6c:	a201      	add	r2, pc, #4	; (adr r2, 8000c74 <fsm_automatic_run_X+0x18>)
 8000c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c72:	bf00      	nop
 8000c74:	08000c85 	.word	0x08000c85
 8000c78:	08000cc3 	.word	0x08000cc3
 8000c7c:	08000d09 	.word	0x08000d09
 8000c80:	08000d4f 	.word	0x08000d4f
	case INIT:
		HAL_GPIO_WritePin(RED_X_GPIO_Port, RED_X_Pin, GPIO_PIN_SET);
 8000c84:	2201      	movs	r2, #1
 8000c86:	2102      	movs	r1, #2
 8000c88:	4848      	ldr	r0, [pc, #288]	; (8000dac <fsm_automatic_run_X+0x150>)
 8000c8a:	f001 f8c8 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_X_GPIO_Port, YELLOW_X_Pin, GPIO_PIN_SET);
 8000c8e:	2201      	movs	r2, #1
 8000c90:	2104      	movs	r1, #4
 8000c92:	4846      	ldr	r0, [pc, #280]	; (8000dac <fsm_automatic_run_X+0x150>)
 8000c94:	f001 f8c3 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_X_GPIO_Port, GREEN_X_Pin, GPIO_PIN_SET);
 8000c98:	2201      	movs	r2, #1
 8000c9a:	2108      	movs	r1, #8
 8000c9c:	4843      	ldr	r0, [pc, #268]	; (8000dac <fsm_automatic_run_X+0x150>)
 8000c9e:	f001 f8be 	bl	8001e1e <HAL_GPIO_WritePin>

		status_X = AUTO_RED_X;
 8000ca2:	4b41      	ldr	r3, [pc, #260]	; (8000da8 <fsm_automatic_run_X+0x14c>)
 8000ca4:	2202      	movs	r2, #2
 8000ca6:	601a      	str	r2, [r3, #0]
		clock_X = time_for_red;
 8000ca8:	4b41      	ldr	r3, [pc, #260]	; (8000db0 <fsm_automatic_run_X+0x154>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a41      	ldr	r2, [pc, #260]	; (8000db4 <fsm_automatic_run_X+0x158>)
 8000cae:	6013      	str	r3, [r2, #0]
		setTimer_X(time_for_red * 100);
 8000cb0:	4b3f      	ldr	r3, [pc, #252]	; (8000db0 <fsm_automatic_run_X+0x154>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2264      	movs	r2, #100	; 0x64
 8000cb6:	fb02 f303 	mul.w	r3, r2, r3
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f000 fc2c 	bl	8001518 <setTimer_X>
		break;
 8000cc0:	e06f      	b.n	8000da2 <fsm_automatic_run_X+0x146>

	case AUTO_RED_X:
		HAL_GPIO_WritePin(RED_X_GPIO_Port, RED_X_Pin, GPIO_PIN_RESET);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2102      	movs	r1, #2
 8000cc6:	4839      	ldr	r0, [pc, #228]	; (8000dac <fsm_automatic_run_X+0x150>)
 8000cc8:	f001 f8a9 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_X_GPIO_Port, YELLOW_X_Pin, GPIO_PIN_SET);
 8000ccc:	2201      	movs	r2, #1
 8000cce:	2104      	movs	r1, #4
 8000cd0:	4836      	ldr	r0, [pc, #216]	; (8000dac <fsm_automatic_run_X+0x150>)
 8000cd2:	f001 f8a4 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_X_GPIO_Port, GREEN_X_Pin, GPIO_PIN_SET);
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	2108      	movs	r1, #8
 8000cda:	4834      	ldr	r0, [pc, #208]	; (8000dac <fsm_automatic_run_X+0x150>)
 8000cdc:	f001 f89f 	bl	8001e1e <HAL_GPIO_WritePin>

		if (timer_flag_1 == 1){
 8000ce0:	4b35      	ldr	r3, [pc, #212]	; (8000db8 <fsm_automatic_run_X+0x15c>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d157      	bne.n	8000d98 <fsm_automatic_run_X+0x13c>
			status_X = AUTO_GREEN_X;
 8000ce8:	4b2f      	ldr	r3, [pc, #188]	; (8000da8 <fsm_automatic_run_X+0x14c>)
 8000cea:	2204      	movs	r2, #4
 8000cec:	601a      	str	r2, [r3, #0]
			clock_X = time_for_green;
 8000cee:	4b33      	ldr	r3, [pc, #204]	; (8000dbc <fsm_automatic_run_X+0x160>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a30      	ldr	r2, [pc, #192]	; (8000db4 <fsm_automatic_run_X+0x158>)
 8000cf4:	6013      	str	r3, [r2, #0]
			setTimer_X(time_for_green * 100);
 8000cf6:	4b31      	ldr	r3, [pc, #196]	; (8000dbc <fsm_automatic_run_X+0x160>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	2264      	movs	r2, #100	; 0x64
 8000cfc:	fb02 f303 	mul.w	r3, r2, r3
 8000d00:	4618      	mov	r0, r3
 8000d02:	f000 fc09 	bl	8001518 <setTimer_X>
		}
		break;
 8000d06:	e047      	b.n	8000d98 <fsm_automatic_run_X+0x13c>

	case AUTO_YELLOW_X:
		HAL_GPIO_WritePin(RED_X_GPIO_Port, RED_X_Pin, GPIO_PIN_SET);
 8000d08:	2201      	movs	r2, #1
 8000d0a:	2102      	movs	r1, #2
 8000d0c:	4827      	ldr	r0, [pc, #156]	; (8000dac <fsm_automatic_run_X+0x150>)
 8000d0e:	f001 f886 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_X_GPIO_Port, YELLOW_X_Pin, GPIO_PIN_RESET);
 8000d12:	2200      	movs	r2, #0
 8000d14:	2104      	movs	r1, #4
 8000d16:	4825      	ldr	r0, [pc, #148]	; (8000dac <fsm_automatic_run_X+0x150>)
 8000d18:	f001 f881 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_X_GPIO_Port, GREEN_X_Pin, GPIO_PIN_SET);
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	2108      	movs	r1, #8
 8000d20:	4822      	ldr	r0, [pc, #136]	; (8000dac <fsm_automatic_run_X+0x150>)
 8000d22:	f001 f87c 	bl	8001e1e <HAL_GPIO_WritePin>

		if (timer_flag_1 == 1){
 8000d26:	4b24      	ldr	r3, [pc, #144]	; (8000db8 <fsm_automatic_run_X+0x15c>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d136      	bne.n	8000d9c <fsm_automatic_run_X+0x140>
			status_X = AUTO_RED_X;
 8000d2e:	4b1e      	ldr	r3, [pc, #120]	; (8000da8 <fsm_automatic_run_X+0x14c>)
 8000d30:	2202      	movs	r2, #2
 8000d32:	601a      	str	r2, [r3, #0]
			clock_X = time_for_red;
 8000d34:	4b1e      	ldr	r3, [pc, #120]	; (8000db0 <fsm_automatic_run_X+0x154>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a1e      	ldr	r2, [pc, #120]	; (8000db4 <fsm_automatic_run_X+0x158>)
 8000d3a:	6013      	str	r3, [r2, #0]
			setTimer_X(time_for_red * 100);
 8000d3c:	4b1c      	ldr	r3, [pc, #112]	; (8000db0 <fsm_automatic_run_X+0x154>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2264      	movs	r2, #100	; 0x64
 8000d42:	fb02 f303 	mul.w	r3, r2, r3
 8000d46:	4618      	mov	r0, r3
 8000d48:	f000 fbe6 	bl	8001518 <setTimer_X>
		}
		break;
 8000d4c:	e026      	b.n	8000d9c <fsm_automatic_run_X+0x140>

	case AUTO_GREEN_X:
		HAL_GPIO_WritePin(RED_X_GPIO_Port, RED_X_Pin, GPIO_PIN_SET);
 8000d4e:	2201      	movs	r2, #1
 8000d50:	2102      	movs	r1, #2
 8000d52:	4816      	ldr	r0, [pc, #88]	; (8000dac <fsm_automatic_run_X+0x150>)
 8000d54:	f001 f863 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_X_GPIO_Port, YELLOW_X_Pin, GPIO_PIN_SET);
 8000d58:	2201      	movs	r2, #1
 8000d5a:	2104      	movs	r1, #4
 8000d5c:	4813      	ldr	r0, [pc, #76]	; (8000dac <fsm_automatic_run_X+0x150>)
 8000d5e:	f001 f85e 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_X_GPIO_Port, GREEN_X_Pin, GPIO_PIN_RESET);
 8000d62:	2200      	movs	r2, #0
 8000d64:	2108      	movs	r1, #8
 8000d66:	4811      	ldr	r0, [pc, #68]	; (8000dac <fsm_automatic_run_X+0x150>)
 8000d68:	f001 f859 	bl	8001e1e <HAL_GPIO_WritePin>

		if (timer_flag_1 == 1){
 8000d6c:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <fsm_automatic_run_X+0x15c>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d115      	bne.n	8000da0 <fsm_automatic_run_X+0x144>
			status_X = AUTO_YELLOW_X;
 8000d74:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <fsm_automatic_run_X+0x14c>)
 8000d76:	2203      	movs	r2, #3
 8000d78:	601a      	str	r2, [r3, #0]
			clock_X = time_for_yellow;
 8000d7a:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <fsm_automatic_run_X+0x164>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a0d      	ldr	r2, [pc, #52]	; (8000db4 <fsm_automatic_run_X+0x158>)
 8000d80:	6013      	str	r3, [r2, #0]
			setTimer_X(time_for_yellow * 100);
 8000d82:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <fsm_automatic_run_X+0x164>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	2264      	movs	r2, #100	; 0x64
 8000d88:	fb02 f303 	mul.w	r3, r2, r3
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f000 fbc3 	bl	8001518 <setTimer_X>
		}
		break;
 8000d92:	e005      	b.n	8000da0 <fsm_automatic_run_X+0x144>

	default:
		break;
 8000d94:	bf00      	nop
 8000d96:	e004      	b.n	8000da2 <fsm_automatic_run_X+0x146>
		break;
 8000d98:	bf00      	nop
 8000d9a:	e002      	b.n	8000da2 <fsm_automatic_run_X+0x146>
		break;
 8000d9c:	bf00      	nop
 8000d9e:	e000      	b.n	8000da2 <fsm_automatic_run_X+0x146>
		break;
 8000da0:	bf00      	nop
	}
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	2000009c 	.word	0x2000009c
 8000dac:	40010800 	.word	0x40010800
 8000db0:	2000003c 	.word	0x2000003c
 8000db4:	20000094 	.word	0x20000094
 8000db8:	200000ac 	.word	0x200000ac
 8000dbc:	20000044 	.word	0x20000044
 8000dc0:	20000040 	.word	0x20000040

08000dc4 <fsm_automatic_run_Y>:

void fsm_automatic_run_Y(void){
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
	switch(status_Y){
 8000dc8:	4b54      	ldr	r3, [pc, #336]	; (8000f1c <fsm_automatic_run_Y+0x158>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	3b01      	subs	r3, #1
 8000dce:	2b06      	cmp	r3, #6
 8000dd0:	f200 809a 	bhi.w	8000f08 <fsm_automatic_run_Y+0x144>
 8000dd4:	a201      	add	r2, pc, #4	; (adr r2, 8000ddc <fsm_automatic_run_Y+0x18>)
 8000dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dda:	bf00      	nop
 8000ddc:	08000df9 	.word	0x08000df9
 8000de0:	08000f09 	.word	0x08000f09
 8000de4:	08000f09 	.word	0x08000f09
 8000de8:	08000f09 	.word	0x08000f09
 8000dec:	08000e37 	.word	0x08000e37
 8000df0:	08000e7d 	.word	0x08000e7d
 8000df4:	08000ec3 	.word	0x08000ec3
	case INIT:
		HAL_GPIO_WritePin(RED_Y_GPIO_Port, RED_Y_Pin, GPIO_PIN_SET);
 8000df8:	2201      	movs	r2, #1
 8000dfa:	2110      	movs	r1, #16
 8000dfc:	4848      	ldr	r0, [pc, #288]	; (8000f20 <fsm_automatic_run_Y+0x15c>)
 8000dfe:	f001 f80e 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_Y_GPIO_Port, YELLOW_Y_Pin, GPIO_PIN_SET);
 8000e02:	2201      	movs	r2, #1
 8000e04:	2120      	movs	r1, #32
 8000e06:	4846      	ldr	r0, [pc, #280]	; (8000f20 <fsm_automatic_run_Y+0x15c>)
 8000e08:	f001 f809 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_Y_GPIO_Port, GREEN_Y_Pin, GPIO_PIN_SET);
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	2140      	movs	r1, #64	; 0x40
 8000e10:	4843      	ldr	r0, [pc, #268]	; (8000f20 <fsm_automatic_run_Y+0x15c>)
 8000e12:	f001 f804 	bl	8001e1e <HAL_GPIO_WritePin>

		status_Y = AUTO_GREEN_Y;
 8000e16:	4b41      	ldr	r3, [pc, #260]	; (8000f1c <fsm_automatic_run_Y+0x158>)
 8000e18:	2207      	movs	r2, #7
 8000e1a:	601a      	str	r2, [r3, #0]
		clock_Y = time_for_green;
 8000e1c:	4b41      	ldr	r3, [pc, #260]	; (8000f24 <fsm_automatic_run_Y+0x160>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a41      	ldr	r2, [pc, #260]	; (8000f28 <fsm_automatic_run_Y+0x164>)
 8000e22:	6013      	str	r3, [r2, #0]
		setTimer_Y(time_for_green * 100);
 8000e24:	4b3f      	ldr	r3, [pc, #252]	; (8000f24 <fsm_automatic_run_Y+0x160>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2264      	movs	r2, #100	; 0x64
 8000e2a:	fb02 f303 	mul.w	r3, r2, r3
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f000 fb86 	bl	8001540 <setTimer_Y>
		break;
 8000e34:	e06f      	b.n	8000f16 <fsm_automatic_run_Y+0x152>

	case AUTO_RED_Y:
		HAL_GPIO_WritePin(RED_Y_GPIO_Port, RED_Y_Pin, GPIO_PIN_RESET);
 8000e36:	2200      	movs	r2, #0
 8000e38:	2110      	movs	r1, #16
 8000e3a:	4839      	ldr	r0, [pc, #228]	; (8000f20 <fsm_automatic_run_Y+0x15c>)
 8000e3c:	f000 ffef 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_Y_GPIO_Port, YELLOW_Y_Pin, GPIO_PIN_SET);
 8000e40:	2201      	movs	r2, #1
 8000e42:	2120      	movs	r1, #32
 8000e44:	4836      	ldr	r0, [pc, #216]	; (8000f20 <fsm_automatic_run_Y+0x15c>)
 8000e46:	f000 ffea 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_Y_GPIO_Port, GREEN_Y_Pin, GPIO_PIN_SET);
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	2140      	movs	r1, #64	; 0x40
 8000e4e:	4834      	ldr	r0, [pc, #208]	; (8000f20 <fsm_automatic_run_Y+0x15c>)
 8000e50:	f000 ffe5 	bl	8001e1e <HAL_GPIO_WritePin>

		if (timer_flag_2 == 1){
 8000e54:	4b35      	ldr	r3, [pc, #212]	; (8000f2c <fsm_automatic_run_Y+0x168>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d157      	bne.n	8000f0c <fsm_automatic_run_Y+0x148>
			status_Y = AUTO_GREEN_Y;
 8000e5c:	4b2f      	ldr	r3, [pc, #188]	; (8000f1c <fsm_automatic_run_Y+0x158>)
 8000e5e:	2207      	movs	r2, #7
 8000e60:	601a      	str	r2, [r3, #0]
			clock_Y = time_for_green;
 8000e62:	4b30      	ldr	r3, [pc, #192]	; (8000f24 <fsm_automatic_run_Y+0x160>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a30      	ldr	r2, [pc, #192]	; (8000f28 <fsm_automatic_run_Y+0x164>)
 8000e68:	6013      	str	r3, [r2, #0]
			setTimer_Y(time_for_green * 100);
 8000e6a:	4b2e      	ldr	r3, [pc, #184]	; (8000f24 <fsm_automatic_run_Y+0x160>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	2264      	movs	r2, #100	; 0x64
 8000e70:	fb02 f303 	mul.w	r3, r2, r3
 8000e74:	4618      	mov	r0, r3
 8000e76:	f000 fb63 	bl	8001540 <setTimer_Y>
		}
		break;
 8000e7a:	e047      	b.n	8000f0c <fsm_automatic_run_Y+0x148>

	case AUTO_YELLOW_Y:
		HAL_GPIO_WritePin(RED_Y_GPIO_Port, RED_Y_Pin, GPIO_PIN_SET);
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	2110      	movs	r1, #16
 8000e80:	4827      	ldr	r0, [pc, #156]	; (8000f20 <fsm_automatic_run_Y+0x15c>)
 8000e82:	f000 ffcc 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_Y_GPIO_Port, YELLOW_Y_Pin, GPIO_PIN_RESET);
 8000e86:	2200      	movs	r2, #0
 8000e88:	2120      	movs	r1, #32
 8000e8a:	4825      	ldr	r0, [pc, #148]	; (8000f20 <fsm_automatic_run_Y+0x15c>)
 8000e8c:	f000 ffc7 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_Y_GPIO_Port, GREEN_Y_Pin, GPIO_PIN_SET);
 8000e90:	2201      	movs	r2, #1
 8000e92:	2140      	movs	r1, #64	; 0x40
 8000e94:	4822      	ldr	r0, [pc, #136]	; (8000f20 <fsm_automatic_run_Y+0x15c>)
 8000e96:	f000 ffc2 	bl	8001e1e <HAL_GPIO_WritePin>

		if (timer_flag_2 == 1){
 8000e9a:	4b24      	ldr	r3, [pc, #144]	; (8000f2c <fsm_automatic_run_Y+0x168>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d136      	bne.n	8000f10 <fsm_automatic_run_Y+0x14c>
			status_Y = AUTO_RED_Y;
 8000ea2:	4b1e      	ldr	r3, [pc, #120]	; (8000f1c <fsm_automatic_run_Y+0x158>)
 8000ea4:	2205      	movs	r2, #5
 8000ea6:	601a      	str	r2, [r3, #0]
			clock_Y = time_for_red;
 8000ea8:	4b21      	ldr	r3, [pc, #132]	; (8000f30 <fsm_automatic_run_Y+0x16c>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a1e      	ldr	r2, [pc, #120]	; (8000f28 <fsm_automatic_run_Y+0x164>)
 8000eae:	6013      	str	r3, [r2, #0]
			setTimer_Y(time_for_red * 100);
 8000eb0:	4b1f      	ldr	r3, [pc, #124]	; (8000f30 <fsm_automatic_run_Y+0x16c>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2264      	movs	r2, #100	; 0x64
 8000eb6:	fb02 f303 	mul.w	r3, r2, r3
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f000 fb40 	bl	8001540 <setTimer_Y>
		}
		break;
 8000ec0:	e026      	b.n	8000f10 <fsm_automatic_run_Y+0x14c>

	case AUTO_GREEN_Y:
		HAL_GPIO_WritePin(RED_Y_GPIO_Port, RED_Y_Pin, GPIO_PIN_SET);
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	2110      	movs	r1, #16
 8000ec6:	4816      	ldr	r0, [pc, #88]	; (8000f20 <fsm_automatic_run_Y+0x15c>)
 8000ec8:	f000 ffa9 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_Y_GPIO_Port, YELLOW_Y_Pin, GPIO_PIN_SET);
 8000ecc:	2201      	movs	r2, #1
 8000ece:	2120      	movs	r1, #32
 8000ed0:	4813      	ldr	r0, [pc, #76]	; (8000f20 <fsm_automatic_run_Y+0x15c>)
 8000ed2:	f000 ffa4 	bl	8001e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_Y_GPIO_Port, GREEN_Y_Pin, GPIO_PIN_RESET);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2140      	movs	r1, #64	; 0x40
 8000eda:	4811      	ldr	r0, [pc, #68]	; (8000f20 <fsm_automatic_run_Y+0x15c>)
 8000edc:	f000 ff9f 	bl	8001e1e <HAL_GPIO_WritePin>

		if (timer_flag_2 == 1){
 8000ee0:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <fsm_automatic_run_Y+0x168>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d115      	bne.n	8000f14 <fsm_automatic_run_Y+0x150>
			status_Y = AUTO_YELLOW_Y;
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <fsm_automatic_run_Y+0x158>)
 8000eea:	2206      	movs	r2, #6
 8000eec:	601a      	str	r2, [r3, #0]
			clock_Y = time_for_yellow;
 8000eee:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <fsm_automatic_run_Y+0x170>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a0d      	ldr	r2, [pc, #52]	; (8000f28 <fsm_automatic_run_Y+0x164>)
 8000ef4:	6013      	str	r3, [r2, #0]
			setTimer_Y(time_for_yellow * 100);
 8000ef6:	4b0f      	ldr	r3, [pc, #60]	; (8000f34 <fsm_automatic_run_Y+0x170>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	2264      	movs	r2, #100	; 0x64
 8000efc:	fb02 f303 	mul.w	r3, r2, r3
 8000f00:	4618      	mov	r0, r3
 8000f02:	f000 fb1d 	bl	8001540 <setTimer_Y>
		}
		break;
 8000f06:	e005      	b.n	8000f14 <fsm_automatic_run_Y+0x150>

	default:
		break;
 8000f08:	bf00      	nop
 8000f0a:	e004      	b.n	8000f16 <fsm_automatic_run_Y+0x152>
		break;
 8000f0c:	bf00      	nop
 8000f0e:	e002      	b.n	8000f16 <fsm_automatic_run_Y+0x152>
		break;
 8000f10:	bf00      	nop
 8000f12:	e000      	b.n	8000f16 <fsm_automatic_run_Y+0x152>
		break;
 8000f14:	bf00      	nop
	}
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	200000a0 	.word	0x200000a0
 8000f20:	40010800 	.word	0x40010800
 8000f24:	20000044 	.word	0x20000044
 8000f28:	20000098 	.word	0x20000098
 8000f2c:	200000b0 	.word	0x200000b0
 8000f30:	2000003c 	.word	0x2000003c
 8000f34:	20000040 	.word	0x20000040

08000f38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f3c:	f000 fc6e 	bl	800181c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f40:	f000 f834 	bl	8000fac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f44:	f000 f8ba 	bl	80010bc <MX_GPIO_Init>
  MX_TIM2_Init();
 8000f48:	f000 f86c 	bl	8001024 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000f4c:	480e      	ldr	r0, [pc, #56]	; (8000f88 <main+0x50>)
 8000f4e:	f001 fbc3 	bl	80026d8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  status_X = INIT;
 8000f52:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <main+0x54>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	601a      	str	r2, [r3, #0]
  status_Y = INIT;
 8000f58:	4b0d      	ldr	r3, [pc, #52]	; (8000f90 <main+0x58>)
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	601a      	str	r2, [r3, #0]

  timer_flag_0 = 1;
 8000f5e:	4b0d      	ldr	r3, [pc, #52]	; (8000f94 <main+0x5c>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	601a      	str	r2, [r3, #0]
  timer_flag_1 = 1;
 8000f64:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <main+0x60>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	601a      	str	r2, [r3, #0]
  timer_flag_2 = 1;
 8000f6a:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <main+0x64>)
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	601a      	str	r2, [r3, #0]
  timer_flag_3 = 1;
 8000f70:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <main+0x68>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	601a      	str	r2, [r3, #0]
  timer_flag_4 = 1;
 8000f76:	4b0b      	ldr	r3, [pc, #44]	; (8000fa4 <main+0x6c>)
 8000f78:	2201      	movs	r2, #1
 8000f7a:	601a      	str	r2, [r3, #0]
  timer_flag_5 = 1;
 8000f7c:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <main+0x70>)
 8000f7e:	2201      	movs	r2, #1
 8000f80:	601a      	str	r2, [r3, #0]
  {
//	  mode_1();
//	  mode_2();
//	  mode_3();
//	  mode_4();
	  run_traffic_light();
 8000f82:	f000 f9db 	bl	800133c <run_traffic_light>
 8000f86:	e7fc      	b.n	8000f82 <main+0x4a>
 8000f88:	200000d8 	.word	0x200000d8
 8000f8c:	2000009c 	.word	0x2000009c
 8000f90:	200000a0 	.word	0x200000a0
 8000f94:	200000a8 	.word	0x200000a8
 8000f98:	200000ac 	.word	0x200000ac
 8000f9c:	200000b0 	.word	0x200000b0
 8000fa0:	200000b4 	.word	0x200000b4
 8000fa4:	200000b8 	.word	0x200000b8
 8000fa8:	200000bc 	.word	0x200000bc

08000fac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b090      	sub	sp, #64	; 0x40
 8000fb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fb2:	f107 0318 	add.w	r3, r7, #24
 8000fb6:	2228      	movs	r2, #40	; 0x28
 8000fb8:	2100      	movs	r1, #0
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f001 ff3c 	bl	8002e38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc0:	1d3b      	adds	r3, r7, #4
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]
 8000fc8:	609a      	str	r2, [r3, #8]
 8000fca:	60da      	str	r2, [r3, #12]
 8000fcc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fd6:	2310      	movs	r3, #16
 8000fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fde:	f107 0318 	add.w	r3, r7, #24
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 ff4c 	bl	8001e80 <HAL_RCC_OscConfig>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000fee:	f000 f8d9 	bl	80011a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ff2:	230f      	movs	r3, #15
 8000ff4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ffe:	2300      	movs	r3, #0
 8001000:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001002:	2300      	movs	r3, #0
 8001004:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001006:	1d3b      	adds	r3, r7, #4
 8001008:	2100      	movs	r1, #0
 800100a:	4618      	mov	r0, r3
 800100c:	f001 f9b8 	bl	8002380 <HAL_RCC_ClockConfig>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001016:	f000 f8c5 	bl	80011a4 <Error_Handler>
  }
}
 800101a:	bf00      	nop
 800101c:	3740      	adds	r7, #64	; 0x40
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
	...

08001024 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800102a:	f107 0308 	add.w	r3, r7, #8
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	609a      	str	r2, [r3, #8]
 8001036:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001038:	463b      	mov	r3, r7
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001040:	4b1d      	ldr	r3, [pc, #116]	; (80010b8 <MX_TIM2_Init+0x94>)
 8001042:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001046:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001048:	4b1b      	ldr	r3, [pc, #108]	; (80010b8 <MX_TIM2_Init+0x94>)
 800104a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800104e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001050:	4b19      	ldr	r3, [pc, #100]	; (80010b8 <MX_TIM2_Init+0x94>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001056:	4b18      	ldr	r3, [pc, #96]	; (80010b8 <MX_TIM2_Init+0x94>)
 8001058:	2209      	movs	r2, #9
 800105a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800105c:	4b16      	ldr	r3, [pc, #88]	; (80010b8 <MX_TIM2_Init+0x94>)
 800105e:	2200      	movs	r2, #0
 8001060:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001062:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <MX_TIM2_Init+0x94>)
 8001064:	2200      	movs	r2, #0
 8001066:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001068:	4813      	ldr	r0, [pc, #76]	; (80010b8 <MX_TIM2_Init+0x94>)
 800106a:	f001 fae5 	bl	8002638 <HAL_TIM_Base_Init>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001074:	f000 f896 	bl	80011a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001078:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800107c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800107e:	f107 0308 	add.w	r3, r7, #8
 8001082:	4619      	mov	r1, r3
 8001084:	480c      	ldr	r0, [pc, #48]	; (80010b8 <MX_TIM2_Init+0x94>)
 8001086:	f001 fc63 	bl	8002950 <HAL_TIM_ConfigClockSource>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001090:	f000 f888 	bl	80011a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001094:	2300      	movs	r3, #0
 8001096:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001098:	2300      	movs	r3, #0
 800109a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800109c:	463b      	mov	r3, r7
 800109e:	4619      	mov	r1, r3
 80010a0:	4805      	ldr	r0, [pc, #20]	; (80010b8 <MX_TIM2_Init+0x94>)
 80010a2:	f001 fe3b 	bl	8002d1c <HAL_TIMEx_MasterConfigSynchronization>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80010ac:	f000 f87a 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010b0:	bf00      	nop
 80010b2:	3718      	adds	r7, #24
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	200000d8 	.word	0x200000d8

080010bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c2:	f107 0308 	add.w	r3, r7, #8
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d0:	4b29      	ldr	r3, [pc, #164]	; (8001178 <MX_GPIO_Init+0xbc>)
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	4a28      	ldr	r2, [pc, #160]	; (8001178 <MX_GPIO_Init+0xbc>)
 80010d6:	f043 0304 	orr.w	r3, r3, #4
 80010da:	6193      	str	r3, [r2, #24]
 80010dc:	4b26      	ldr	r3, [pc, #152]	; (8001178 <MX_GPIO_Init+0xbc>)
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	f003 0304 	and.w	r3, r3, #4
 80010e4:	607b      	str	r3, [r7, #4]
 80010e6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e8:	4b23      	ldr	r3, [pc, #140]	; (8001178 <MX_GPIO_Init+0xbc>)
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	4a22      	ldr	r2, [pc, #136]	; (8001178 <MX_GPIO_Init+0xbc>)
 80010ee:	f043 0308 	orr.w	r3, r3, #8
 80010f2:	6193      	str	r3, [r2, #24]
 80010f4:	4b20      	ldr	r3, [pc, #128]	; (8001178 <MX_GPIO_Init+0xbc>)
 80010f6:	699b      	ldr	r3, [r3, #24]
 80010f8:	f003 0308 	and.w	r3, r3, #8
 80010fc:	603b      	str	r3, [r7, #0]
 80010fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_X_Pin|YELLOW_X_Pin|GREEN_X_Pin|RED_Y_Pin
 8001100:	2200      	movs	r2, #0
 8001102:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8001106:	481d      	ldr	r0, [pc, #116]	; (800117c <MX_GPIO_Init+0xc0>)
 8001108:	f000 fe89 	bl	8001e1e <HAL_GPIO_WritePin>
                          |YELLOW_Y_Pin|GREEN_Y_Pin|SEG0_X_Pin|SEG1_X_Pin
                          |SEG2_X_Pin|SEG3_X_Pin|SEG4_X_Pin|SEG5_X_Pin
                          |SEG6_X_Pin|EN0_X_Pin|EN1_X_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Y_Pin|SEG1_Y_Pin|SEG2_Y_Pin|EN1_Y_Pin
 800110c:	2200      	movs	r2, #0
 800110e:	f241 01ff 	movw	r1, #4351	; 0x10ff
 8001112:	481b      	ldr	r0, [pc, #108]	; (8001180 <MX_GPIO_Init+0xc4>)
 8001114:	f000 fe83 	bl	8001e1e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RED_X_Pin YELLOW_X_Pin GREEN_X_Pin RED_Y_Pin
                           YELLOW_Y_Pin GREEN_Y_Pin SEG0_X_Pin SEG1_X_Pin
                           SEG2_X_Pin SEG3_X_Pin SEG4_X_Pin SEG5_X_Pin
                           SEG6_X_Pin EN0_X_Pin EN1_X_Pin */
  GPIO_InitStruct.Pin = RED_X_Pin|YELLOW_X_Pin|GREEN_X_Pin|RED_Y_Pin
 8001118:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800111c:	60bb      	str	r3, [r7, #8]
                          |YELLOW_Y_Pin|GREEN_Y_Pin|SEG0_X_Pin|SEG1_X_Pin
                          |SEG2_X_Pin|SEG3_X_Pin|SEG4_X_Pin|SEG5_X_Pin
                          |SEG6_X_Pin|EN0_X_Pin|EN1_X_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111e:	2301      	movs	r3, #1
 8001120:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001126:	2302      	movs	r3, #2
 8001128:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112a:	f107 0308 	add.w	r3, r7, #8
 800112e:	4619      	mov	r1, r3
 8001130:	4812      	ldr	r0, [pc, #72]	; (800117c <MX_GPIO_Init+0xc0>)
 8001132:	f000 fce3 	bl	8001afc <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Y_Pin SEG1_Y_Pin SEG2_Y_Pin EN1_Y_Pin
                           SEG3_Y_Pin SEG4_Y_Pin SEG5_Y_Pin SEG6_Y_Pin
                           EN0_Y_Pin */
  GPIO_InitStruct.Pin = SEG0_Y_Pin|SEG1_Y_Pin|SEG2_Y_Pin|EN1_Y_Pin
 8001136:	f241 03ff 	movw	r3, #4351	; 0x10ff
 800113a:	60bb      	str	r3, [r7, #8]
                          |SEG3_Y_Pin|SEG4_Y_Pin|SEG5_Y_Pin|SEG6_Y_Pin
                          |EN0_Y_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113c:	2301      	movs	r3, #1
 800113e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001144:	2302      	movs	r3, #2
 8001146:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001148:	f107 0308 	add.w	r3, r7, #8
 800114c:	4619      	mov	r1, r3
 800114e:	480c      	ldr	r0, [pc, #48]	; (8001180 <MX_GPIO_Init+0xc4>)
 8001150:	f000 fcd4 	bl	8001afc <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_2_Pin BUTTON_3_Pin BUTTON_1_Pin */
  GPIO_InitStruct.Pin = BUTTON_2_Pin|BUTTON_3_Pin|BUTTON_1_Pin;
 8001154:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8001158:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800115e:	2301      	movs	r3, #1
 8001160:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001162:	f107 0308 	add.w	r3, r7, #8
 8001166:	4619      	mov	r1, r3
 8001168:	4805      	ldr	r0, [pc, #20]	; (8001180 <MX_GPIO_Init+0xc4>)
 800116a:	f000 fcc7 	bl	8001afc <HAL_GPIO_Init>

}
 800116e:	bf00      	nop
 8001170:	3718      	adds	r7, #24
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40021000 	.word	0x40021000
 800117c:	40010800 	.word	0x40010800
 8001180:	40010c00 	.word	0x40010c00

08001184 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
	timer_run();
 800118c:	f000 fa14 	bl	80015b8 <timer_run>
	getKeyInput_1();
 8001190:	f7ff f836 	bl	8000200 <getKeyInput_1>
	getKeyInput_2();
 8001194:	f7ff f882 	bl	800029c <getKeyInput_2>
	getKeyInput_3();
 8001198:	f7ff f8ce 	bl	8000338 <getKeyInput_3>
}
 800119c:	bf00      	nop
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011a8:	b672      	cpsid	i
}
 80011aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011ac:	e7fe      	b.n	80011ac <Error_Handler+0x8>
	...

080011b0 <mode_1>:
int time_for_green = 3;
int time_set = 0;

int current_mode = 1;

void mode_1(void){
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
	fsm_automatic_run_X();
 80011b4:	f7ff fd52 	bl	8000c5c <fsm_automatic_run_X>
	fsm_automatic_run_Y();
 80011b8:	f7ff fe04 	bl	8000dc4 <fsm_automatic_run_Y>
	updateBuffer(clock_X, clock_Y);
 80011bc:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <mode_1+0x24>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a05      	ldr	r2, [pc, #20]	; (80011d8 <mode_1+0x28>)
 80011c2:	6812      	ldr	r2, [r2, #0]
 80011c4:	4611      	mov	r1, r2
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff fcbc 	bl	8000b44 <updateBuffer>
	countdown();
 80011cc:	f7ff fd2a 	bl	8000c24 <countdown>
}
 80011d0:	bf00      	nop
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20000094 	.word	0x20000094
 80011d8:	20000098 	.word	0x20000098

080011dc <mode_2>:

void mode_2(void){
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
	time_set = time_for_red;
 80011e0:	4b10      	ldr	r3, [pc, #64]	; (8001224 <mode_2+0x48>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a10      	ldr	r2, [pc, #64]	; (8001228 <mode_2+0x4c>)
 80011e6:	6013      	str	r3, [r2, #0]
	modifyRedLED();
 80011e8:	f000 f8d4 	bl	8001394 <modifyRedLED>
	if (isButton2Pressed()){
 80011ec:	f7fe ffe4 	bl	80001b8 <isButton2Pressed>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d00b      	beq.n	800120e <mode_2+0x32>
		time_set++;
 80011f6:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <mode_2+0x4c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	3301      	adds	r3, #1
 80011fc:	4a0a      	ldr	r2, [pc, #40]	; (8001228 <mode_2+0x4c>)
 80011fe:	6013      	str	r3, [r2, #0]
		if (time_set > 99){
 8001200:	4b09      	ldr	r3, [pc, #36]	; (8001228 <mode_2+0x4c>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2b63      	cmp	r3, #99	; 0x63
 8001206:	dd02      	ble.n	800120e <mode_2+0x32>
			time_for_red = 0;
 8001208:	4b06      	ldr	r3, [pc, #24]	; (8001224 <mode_2+0x48>)
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
		}
	}
	if (isButton3Pressed()){
 800120e:	f7fe ffe5 	bl	80001dc <isButton3Pressed>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d003      	beq.n	8001220 <mode_2+0x44>
		time_for_red = time_set;
 8001218:	4b03      	ldr	r3, [pc, #12]	; (8001228 <mode_2+0x4c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a01      	ldr	r2, [pc, #4]	; (8001224 <mode_2+0x48>)
 800121e:	6013      	str	r3, [r2, #0]
	}
}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}
 8001224:	2000003c 	.word	0x2000003c
 8001228:	200000a4 	.word	0x200000a4

0800122c <mode_3>:

void mode_3(void){
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
	time_set = time_for_yellow;
 8001230:	4b10      	ldr	r3, [pc, #64]	; (8001274 <mode_3+0x48>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a10      	ldr	r2, [pc, #64]	; (8001278 <mode_3+0x4c>)
 8001236:	6013      	str	r3, [r2, #0]
	modifyYellowLED();
 8001238:	f000 f8e6 	bl	8001408 <modifyYellowLED>
	if (isButton2Pressed()){
 800123c:	f7fe ffbc 	bl	80001b8 <isButton2Pressed>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d00b      	beq.n	800125e <mode_3+0x32>
		time_set++;
 8001246:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <mode_3+0x4c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	3301      	adds	r3, #1
 800124c:	4a0a      	ldr	r2, [pc, #40]	; (8001278 <mode_3+0x4c>)
 800124e:	6013      	str	r3, [r2, #0]
		if (time_set > 99){
 8001250:	4b09      	ldr	r3, [pc, #36]	; (8001278 <mode_3+0x4c>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2b63      	cmp	r3, #99	; 0x63
 8001256:	dd02      	ble.n	800125e <mode_3+0x32>
			time_for_yellow = 0;
 8001258:	4b06      	ldr	r3, [pc, #24]	; (8001274 <mode_3+0x48>)
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
		}
	}
	if (isButton3Pressed()){
 800125e:	f7fe ffbd 	bl	80001dc <isButton3Pressed>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d003      	beq.n	8001270 <mode_3+0x44>
		time_for_yellow = time_set;
 8001268:	4b03      	ldr	r3, [pc, #12]	; (8001278 <mode_3+0x4c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a01      	ldr	r2, [pc, #4]	; (8001274 <mode_3+0x48>)
 800126e:	6013      	str	r3, [r2, #0]
	}
}
 8001270:	bf00      	nop
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20000040 	.word	0x20000040
 8001278:	200000a4 	.word	0x200000a4

0800127c <mode_4>:

void mode_4(void){
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
	time_set = time_for_green;
 8001280:	4b10      	ldr	r3, [pc, #64]	; (80012c4 <mode_4+0x48>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a10      	ldr	r2, [pc, #64]	; (80012c8 <mode_4+0x4c>)
 8001286:	6013      	str	r3, [r2, #0]
	modifyGreenLED();
 8001288:	f000 f8f8 	bl	800147c <modifyGreenLED>
	if (isButton2Pressed()){
 800128c:	f7fe ff94 	bl	80001b8 <isButton2Pressed>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d00b      	beq.n	80012ae <mode_4+0x32>
		time_set++;
 8001296:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <mode_4+0x4c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	3301      	adds	r3, #1
 800129c:	4a0a      	ldr	r2, [pc, #40]	; (80012c8 <mode_4+0x4c>)
 800129e:	6013      	str	r3, [r2, #0]
		if (time_set > 99){
 80012a0:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <mode_4+0x4c>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2b63      	cmp	r3, #99	; 0x63
 80012a6:	dd02      	ble.n	80012ae <mode_4+0x32>
			time_for_green = 0;
 80012a8:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <mode_4+0x48>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
		}
	}
	if (isButton3Pressed()){
 80012ae:	f7fe ff95 	bl	80001dc <isButton3Pressed>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d003      	beq.n	80012c0 <mode_4+0x44>
		time_for_green = time_set;
 80012b8:	4b03      	ldr	r3, [pc, #12]	; (80012c8 <mode_4+0x4c>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a01      	ldr	r2, [pc, #4]	; (80012c4 <mode_4+0x48>)
 80012be:	6013      	str	r3, [r2, #0]
	}
}
 80012c0:	bf00      	nop
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000044 	.word	0x20000044
 80012c8:	200000a4 	.word	0x200000a4

080012cc <change_mode>:

void change_mode(void){
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
	if (isButton1Pressed()){
 80012d0:	f7fe ff60 	bl	8000194 <isButton1Pressed>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d023      	beq.n	8001322 <change_mode+0x56>
		current_mode++;
 80012da:	4b13      	ldr	r3, [pc, #76]	; (8001328 <change_mode+0x5c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	3301      	adds	r3, #1
 80012e0:	4a11      	ldr	r2, [pc, #68]	; (8001328 <change_mode+0x5c>)
 80012e2:	6013      	str	r3, [r2, #0]
		if (current_mode > 4){
 80012e4:	4b10      	ldr	r3, [pc, #64]	; (8001328 <change_mode+0x5c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2b04      	cmp	r3, #4
 80012ea:	dd1a      	ble.n	8001322 <change_mode+0x56>
			current_mode = 1;
 80012ec:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <change_mode+0x5c>)
 80012ee:	2201      	movs	r2, #1
 80012f0:	601a      	str	r2, [r3, #0]
			setTimer_X(time_for_red * 100);
 80012f2:	4b0e      	ldr	r3, [pc, #56]	; (800132c <change_mode+0x60>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2264      	movs	r2, #100	; 0x64
 80012f8:	fb02 f303 	mul.w	r3, r2, r3
 80012fc:	4618      	mov	r0, r3
 80012fe:	f000 f90b 	bl	8001518 <setTimer_X>
			setTimer_Y(time_for_green * 100);
 8001302:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <change_mode+0x64>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2264      	movs	r2, #100	; 0x64
 8001308:	fb02 f303 	mul.w	r3, r2, r3
 800130c:	4618      	mov	r0, r3
 800130e:	f000 f917 	bl	8001540 <setTimer_Y>
			clock_X = time_for_red;
 8001312:	4b06      	ldr	r3, [pc, #24]	; (800132c <change_mode+0x60>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a07      	ldr	r2, [pc, #28]	; (8001334 <change_mode+0x68>)
 8001318:	6013      	str	r3, [r2, #0]
			clock_Y = time_for_green;
 800131a:	4b05      	ldr	r3, [pc, #20]	; (8001330 <change_mode+0x64>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a06      	ldr	r2, [pc, #24]	; (8001338 <change_mode+0x6c>)
 8001320:	6013      	str	r3, [r2, #0]
		}
	}
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000048 	.word	0x20000048
 800132c:	2000003c 	.word	0x2000003c
 8001330:	20000044 	.word	0x20000044
 8001334:	20000094 	.word	0x20000094
 8001338:	20000098 	.word	0x20000098

0800133c <run_traffic_light>:

void run_traffic_light(void){
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
	switch(current_mode){
 8001340:	4b13      	ldr	r3, [pc, #76]	; (8001390 <run_traffic_light+0x54>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	3b01      	subs	r3, #1
 8001346:	2b03      	cmp	r3, #3
 8001348:	d81e      	bhi.n	8001388 <run_traffic_light+0x4c>
 800134a:	a201      	add	r2, pc, #4	; (adr r2, 8001350 <run_traffic_light+0x14>)
 800134c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001350:	08001361 	.word	0x08001361
 8001354:	0800136b 	.word	0x0800136b
 8001358:	08001375 	.word	0x08001375
 800135c:	0800137f 	.word	0x0800137f
	case 1:
		mode_1();
 8001360:	f7ff ff26 	bl	80011b0 <mode_1>
		change_mode();
 8001364:	f7ff ffb2 	bl	80012cc <change_mode>
		break;
 8001368:	e00f      	b.n	800138a <run_traffic_light+0x4e>
	case 2:
		mode_2();
 800136a:	f7ff ff37 	bl	80011dc <mode_2>
		change_mode();
 800136e:	f7ff ffad 	bl	80012cc <change_mode>
		break;
 8001372:	e00a      	b.n	800138a <run_traffic_light+0x4e>
	case 3:
		mode_3();
 8001374:	f7ff ff5a 	bl	800122c <mode_3>
		change_mode();
 8001378:	f7ff ffa8 	bl	80012cc <change_mode>
		break;
 800137c:	e005      	b.n	800138a <run_traffic_light+0x4e>
	case 4:
		mode_4();
 800137e:	f7ff ff7d 	bl	800127c <mode_4>
		change_mode();
 8001382:	f7ff ffa3 	bl	80012cc <change_mode>
		break;
 8001386:	e000      	b.n	800138a <run_traffic_light+0x4e>
	default:
		break;
 8001388:	bf00      	nop
	}
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000048 	.word	0x20000048

08001394 <modifyRedLED>:
 *      Author: ADMIN
 */
#include "modify.h"
#include "display7SEG.h"

void modifyRedLED(void){
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
	int mode = 2;
 800139a:	2302      	movs	r3, #2
 800139c:	607b      	str	r3, [r7, #4]
	int clock_Y = time_set;
 800139e:	4b17      	ldr	r3, [pc, #92]	; (80013fc <modifyRedLED+0x68>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(YELLOW_X_GPIO_Port, YELLOW_X_Pin, GPIO_PIN_SET);
 80013a4:	2201      	movs	r2, #1
 80013a6:	2104      	movs	r1, #4
 80013a8:	4815      	ldr	r0, [pc, #84]	; (8001400 <modifyRedLED+0x6c>)
 80013aa:	f000 fd38 	bl	8001e1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_X_GPIO_Port, GREEN_X_Pin, GPIO_PIN_SET);
 80013ae:	2201      	movs	r2, #1
 80013b0:	2108      	movs	r1, #8
 80013b2:	4813      	ldr	r0, [pc, #76]	; (8001400 <modifyRedLED+0x6c>)
 80013b4:	f000 fd33 	bl	8001e1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_Y_GPIO_Port, YELLOW_Y_Pin, GPIO_PIN_SET);
 80013b8:	2201      	movs	r2, #1
 80013ba:	2120      	movs	r1, #32
 80013bc:	4810      	ldr	r0, [pc, #64]	; (8001400 <modifyRedLED+0x6c>)
 80013be:	f000 fd2e 	bl	8001e1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_Y_GPIO_Port, GREEN_Y_Pin, GPIO_PIN_SET);
 80013c2:	2201      	movs	r2, #1
 80013c4:	2140      	movs	r1, #64	; 0x40
 80013c6:	480e      	ldr	r0, [pc, #56]	; (8001400 <modifyRedLED+0x6c>)
 80013c8:	f000 fd29 	bl	8001e1e <HAL_GPIO_WritePin>
	updateBuffer(mode, clock_Y);
 80013cc:	6839      	ldr	r1, [r7, #0]
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f7ff fbb8 	bl	8000b44 <updateBuffer>
	if (timer_flag_5 == 1){
 80013d4:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <modifyRedLED+0x70>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d10a      	bne.n	80013f2 <modifyRedLED+0x5e>
		HAL_GPIO_TogglePin(RED_X_GPIO_Port, RED_X_Pin);
 80013dc:	2102      	movs	r1, #2
 80013de:	4808      	ldr	r0, [pc, #32]	; (8001400 <modifyRedLED+0x6c>)
 80013e0:	f000 fd35 	bl	8001e4e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(RED_Y_GPIO_Port, RED_Y_Pin);
 80013e4:	2110      	movs	r1, #16
 80013e6:	4806      	ldr	r0, [pc, #24]	; (8001400 <modifyRedLED+0x6c>)
 80013e8:	f000 fd31 	bl	8001e4e <HAL_GPIO_TogglePin>
		setTimer(50);
 80013ec:	2032      	movs	r0, #50	; 0x32
 80013ee:	f000 f8cf 	bl	8001590 <setTimer>
	}
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	200000a4 	.word	0x200000a4
 8001400:	40010800 	.word	0x40010800
 8001404:	200000bc 	.word	0x200000bc

08001408 <modifyYellowLED>:
void modifyYellowLED(void){
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
	int mode = 3;
 800140e:	2303      	movs	r3, #3
 8001410:	607b      	str	r3, [r7, #4]
	int clock_Y = time_set;
 8001412:	4b17      	ldr	r3, [pc, #92]	; (8001470 <modifyYellowLED+0x68>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(RED_X_GPIO_Port, RED_X_Pin, GPIO_PIN_SET);
 8001418:	2201      	movs	r2, #1
 800141a:	2102      	movs	r1, #2
 800141c:	4815      	ldr	r0, [pc, #84]	; (8001474 <modifyYellowLED+0x6c>)
 800141e:	f000 fcfe 	bl	8001e1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_X_GPIO_Port, GREEN_X_Pin, GPIO_PIN_SET);
 8001422:	2201      	movs	r2, #1
 8001424:	2108      	movs	r1, #8
 8001426:	4813      	ldr	r0, [pc, #76]	; (8001474 <modifyYellowLED+0x6c>)
 8001428:	f000 fcf9 	bl	8001e1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED_Y_GPIO_Port, RED_Y_Pin, GPIO_PIN_SET);
 800142c:	2201      	movs	r2, #1
 800142e:	2110      	movs	r1, #16
 8001430:	4810      	ldr	r0, [pc, #64]	; (8001474 <modifyYellowLED+0x6c>)
 8001432:	f000 fcf4 	bl	8001e1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_Y_GPIO_Port, GREEN_Y_Pin, GPIO_PIN_SET);
 8001436:	2201      	movs	r2, #1
 8001438:	2140      	movs	r1, #64	; 0x40
 800143a:	480e      	ldr	r0, [pc, #56]	; (8001474 <modifyYellowLED+0x6c>)
 800143c:	f000 fcef 	bl	8001e1e <HAL_GPIO_WritePin>
	updateBuffer(mode, clock_Y);
 8001440:	6839      	ldr	r1, [r7, #0]
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff fb7e 	bl	8000b44 <updateBuffer>
	if (timer_flag_5 == 1){
 8001448:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <modifyYellowLED+0x70>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d10a      	bne.n	8001466 <modifyYellowLED+0x5e>
		HAL_GPIO_TogglePin(YELLOW_X_GPIO_Port, YELLOW_X_Pin);
 8001450:	2104      	movs	r1, #4
 8001452:	4808      	ldr	r0, [pc, #32]	; (8001474 <modifyYellowLED+0x6c>)
 8001454:	f000 fcfb 	bl	8001e4e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(YELLOW_Y_GPIO_Port, YELLOW_Y_Pin);
 8001458:	2120      	movs	r1, #32
 800145a:	4806      	ldr	r0, [pc, #24]	; (8001474 <modifyYellowLED+0x6c>)
 800145c:	f000 fcf7 	bl	8001e4e <HAL_GPIO_TogglePin>
		setTimer(50);
 8001460:	2032      	movs	r0, #50	; 0x32
 8001462:	f000 f895 	bl	8001590 <setTimer>
	}
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	200000a4 	.word	0x200000a4
 8001474:	40010800 	.word	0x40010800
 8001478:	200000bc 	.word	0x200000bc

0800147c <modifyGreenLED>:
void modifyGreenLED(void){
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
	int mode = 4;
 8001482:	2304      	movs	r3, #4
 8001484:	607b      	str	r3, [r7, #4]
	int clock_Y = time_set;
 8001486:	4b17      	ldr	r3, [pc, #92]	; (80014e4 <modifyGreenLED+0x68>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(YELLOW_X_GPIO_Port, YELLOW_X_Pin, GPIO_PIN_SET);
 800148c:	2201      	movs	r2, #1
 800148e:	2104      	movs	r1, #4
 8001490:	4815      	ldr	r0, [pc, #84]	; (80014e8 <modifyGreenLED+0x6c>)
 8001492:	f000 fcc4 	bl	8001e1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED_X_GPIO_Port, RED_X_Pin, GPIO_PIN_SET);
 8001496:	2201      	movs	r2, #1
 8001498:	2102      	movs	r1, #2
 800149a:	4813      	ldr	r0, [pc, #76]	; (80014e8 <modifyGreenLED+0x6c>)
 800149c:	f000 fcbf 	bl	8001e1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_Y_GPIO_Port, YELLOW_Y_Pin, GPIO_PIN_SET);
 80014a0:	2201      	movs	r2, #1
 80014a2:	2120      	movs	r1, #32
 80014a4:	4810      	ldr	r0, [pc, #64]	; (80014e8 <modifyGreenLED+0x6c>)
 80014a6:	f000 fcba 	bl	8001e1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED_Y_GPIO_Port, RED_Y_Pin, GPIO_PIN_SET);
 80014aa:	2201      	movs	r2, #1
 80014ac:	2110      	movs	r1, #16
 80014ae:	480e      	ldr	r0, [pc, #56]	; (80014e8 <modifyGreenLED+0x6c>)
 80014b0:	f000 fcb5 	bl	8001e1e <HAL_GPIO_WritePin>
	updateBuffer(mode, clock_Y);
 80014b4:	6839      	ldr	r1, [r7, #0]
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f7ff fb44 	bl	8000b44 <updateBuffer>
	if (timer_flag_5 == 1){
 80014bc:	4b0b      	ldr	r3, [pc, #44]	; (80014ec <modifyGreenLED+0x70>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d10a      	bne.n	80014da <modifyGreenLED+0x5e>
		HAL_GPIO_TogglePin(GREEN_X_GPIO_Port, GREEN_X_Pin);
 80014c4:	2108      	movs	r1, #8
 80014c6:	4808      	ldr	r0, [pc, #32]	; (80014e8 <modifyGreenLED+0x6c>)
 80014c8:	f000 fcc1 	bl	8001e4e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GREEN_Y_GPIO_Port, GREEN_Y_Pin);
 80014cc:	2140      	movs	r1, #64	; 0x40
 80014ce:	4806      	ldr	r0, [pc, #24]	; (80014e8 <modifyGreenLED+0x6c>)
 80014d0:	f000 fcbd 	bl	8001e4e <HAL_GPIO_TogglePin>
		setTimer(50);
 80014d4:	2032      	movs	r0, #50	; 0x32
 80014d6:	f000 f85b 	bl	8001590 <setTimer>
	}
}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	200000a4 	.word	0x200000a4
 80014e8:	40010800 	.word	0x40010800
 80014ec:	200000bc 	.word	0x200000bc

080014f0 <setTimer_Sweeper_X>:
int timer_counter_2 = 0;
int timer_counter_3 = 0;
int timer_counter_4 = 0;
int timer_counter_5 = 0;

void setTimer_Sweeper_X(int duration){
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
	timer_counter_0 = duration;
 80014f8:	4a05      	ldr	r2, [pc, #20]	; (8001510 <setTimer_Sweeper_X+0x20>)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6013      	str	r3, [r2, #0]
	timer_flag_0 = 0;
 80014fe:	4b05      	ldr	r3, [pc, #20]	; (8001514 <setTimer_Sweeper_X+0x24>)
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	bc80      	pop	{r7}
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	200000c0 	.word	0x200000c0
 8001514:	200000a8 	.word	0x200000a8

08001518 <setTimer_X>:

void setTimer_X(int duration){
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
	timer_counter_1 = duration;
 8001520:	4a05      	ldr	r2, [pc, #20]	; (8001538 <setTimer_X+0x20>)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6013      	str	r3, [r2, #0]
	timer_flag_1 = 0;				//Start count-down
 8001526:	4b05      	ldr	r3, [pc, #20]	; (800153c <setTimer_X+0x24>)
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
}
 800152c:	bf00      	nop
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	200000c4 	.word	0x200000c4
 800153c:	200000ac 	.word	0x200000ac

08001540 <setTimer_Y>:

void setTimer_Y(int duration){
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
	timer_counter_2 = duration;
 8001548:	4a05      	ldr	r2, [pc, #20]	; (8001560 <setTimer_Y+0x20>)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6013      	str	r3, [r2, #0]
	timer_flag_2 = 0;				//Start count-down
 800154e:	4b05      	ldr	r3, [pc, #20]	; (8001564 <setTimer_Y+0x24>)
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	bc80      	pop	{r7}
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	200000c8 	.word	0x200000c8
 8001564:	200000b0 	.word	0x200000b0

08001568 <setTimer_Clock>:

void setTimer_Clock(int duration){
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
	timer_counter_3 = duration;
 8001570:	4a05      	ldr	r2, [pc, #20]	; (8001588 <setTimer_Clock+0x20>)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6013      	str	r3, [r2, #0]
	timer_flag_3 = 0;				//Start count-down
 8001576:	4b05      	ldr	r3, [pc, #20]	; (800158c <setTimer_Clock+0x24>)
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	bc80      	pop	{r7}
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	200000cc 	.word	0x200000cc
 800158c:	200000b4 	.word	0x200000b4

08001590 <setTimer>:
void setTimer_Sweeper_Y(int duration){
	timer_counter_4 = duration;
	timer_flag_4 = 0;				//Start count-down
}

void setTimer(int duration){
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
	timer_counter_5 = duration;
 8001598:	4a05      	ldr	r2, [pc, #20]	; (80015b0 <setTimer+0x20>)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6013      	str	r3, [r2, #0]
	timer_flag_5 = 0;
 800159e:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <setTimer+0x24>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bc80      	pop	{r7}
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	200000d4 	.word	0x200000d4
 80015b4:	200000bc 	.word	0x200000bc

080015b8 <timer_run>:

void timer_run(void){
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
	if(timer_counter_0 > 0){
 80015bc:	4b31      	ldr	r3, [pc, #196]	; (8001684 <timer_run+0xcc>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	dd0b      	ble.n	80015dc <timer_run+0x24>
		timer_counter_0--;
 80015c4:	4b2f      	ldr	r3, [pc, #188]	; (8001684 <timer_run+0xcc>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	3b01      	subs	r3, #1
 80015ca:	4a2e      	ldr	r2, [pc, #184]	; (8001684 <timer_run+0xcc>)
 80015cc:	6013      	str	r3, [r2, #0]
		if(timer_counter_0 <= 0){
 80015ce:	4b2d      	ldr	r3, [pc, #180]	; (8001684 <timer_run+0xcc>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	dc02      	bgt.n	80015dc <timer_run+0x24>
			timer_flag_0 = 1;		//Time's up
 80015d6:	4b2c      	ldr	r3, [pc, #176]	; (8001688 <timer_run+0xd0>)
 80015d8:	2201      	movs	r2, #1
 80015da:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer_counter_1 > 0){
 80015dc:	4b2b      	ldr	r3, [pc, #172]	; (800168c <timer_run+0xd4>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	dd0b      	ble.n	80015fc <timer_run+0x44>
		timer_counter_1--;
 80015e4:	4b29      	ldr	r3, [pc, #164]	; (800168c <timer_run+0xd4>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	3b01      	subs	r3, #1
 80015ea:	4a28      	ldr	r2, [pc, #160]	; (800168c <timer_run+0xd4>)
 80015ec:	6013      	str	r3, [r2, #0]
		if(timer_counter_1 <= 0){
 80015ee:	4b27      	ldr	r3, [pc, #156]	; (800168c <timer_run+0xd4>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	dc02      	bgt.n	80015fc <timer_run+0x44>
			timer_flag_1 = 1;		//Time's up
 80015f6:	4b26      	ldr	r3, [pc, #152]	; (8001690 <timer_run+0xd8>)
 80015f8:	2201      	movs	r2, #1
 80015fa:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer_counter_2 > 0){
 80015fc:	4b25      	ldr	r3, [pc, #148]	; (8001694 <timer_run+0xdc>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2b00      	cmp	r3, #0
 8001602:	dd0b      	ble.n	800161c <timer_run+0x64>
		timer_counter_2--;
 8001604:	4b23      	ldr	r3, [pc, #140]	; (8001694 <timer_run+0xdc>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	3b01      	subs	r3, #1
 800160a:	4a22      	ldr	r2, [pc, #136]	; (8001694 <timer_run+0xdc>)
 800160c:	6013      	str	r3, [r2, #0]
		if(timer_counter_2 <= 0){
 800160e:	4b21      	ldr	r3, [pc, #132]	; (8001694 <timer_run+0xdc>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2b00      	cmp	r3, #0
 8001614:	dc02      	bgt.n	800161c <timer_run+0x64>
			timer_flag_2 = 1;		//Time's up
 8001616:	4b20      	ldr	r3, [pc, #128]	; (8001698 <timer_run+0xe0>)
 8001618:	2201      	movs	r2, #1
 800161a:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer_counter_3 > 0){
 800161c:	4b1f      	ldr	r3, [pc, #124]	; (800169c <timer_run+0xe4>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	dd0b      	ble.n	800163c <timer_run+0x84>
		timer_counter_3--;
 8001624:	4b1d      	ldr	r3, [pc, #116]	; (800169c <timer_run+0xe4>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	3b01      	subs	r3, #1
 800162a:	4a1c      	ldr	r2, [pc, #112]	; (800169c <timer_run+0xe4>)
 800162c:	6013      	str	r3, [r2, #0]
		if(timer_counter_3 <= 0){
 800162e:	4b1b      	ldr	r3, [pc, #108]	; (800169c <timer_run+0xe4>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2b00      	cmp	r3, #0
 8001634:	dc02      	bgt.n	800163c <timer_run+0x84>
			timer_flag_3 = 1;		//Time's up
 8001636:	4b1a      	ldr	r3, [pc, #104]	; (80016a0 <timer_run+0xe8>)
 8001638:	2201      	movs	r2, #1
 800163a:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer_counter_4 > 0){
 800163c:	4b19      	ldr	r3, [pc, #100]	; (80016a4 <timer_run+0xec>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	dd0b      	ble.n	800165c <timer_run+0xa4>
		timer_counter_4--;
 8001644:	4b17      	ldr	r3, [pc, #92]	; (80016a4 <timer_run+0xec>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	3b01      	subs	r3, #1
 800164a:	4a16      	ldr	r2, [pc, #88]	; (80016a4 <timer_run+0xec>)
 800164c:	6013      	str	r3, [r2, #0]
		if(timer_counter_4 <= 0){
 800164e:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <timer_run+0xec>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2b00      	cmp	r3, #0
 8001654:	dc02      	bgt.n	800165c <timer_run+0xa4>
			timer_flag_4 = 1;		//Time's up
 8001656:	4b14      	ldr	r3, [pc, #80]	; (80016a8 <timer_run+0xf0>)
 8001658:	2201      	movs	r2, #1
 800165a:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer_counter_5 > 0){
 800165c:	4b13      	ldr	r3, [pc, #76]	; (80016ac <timer_run+0xf4>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	dd0b      	ble.n	800167c <timer_run+0xc4>
		timer_counter_5--;
 8001664:	4b11      	ldr	r3, [pc, #68]	; (80016ac <timer_run+0xf4>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	3b01      	subs	r3, #1
 800166a:	4a10      	ldr	r2, [pc, #64]	; (80016ac <timer_run+0xf4>)
 800166c:	6013      	str	r3, [r2, #0]
		if(timer_counter_5 <= 0){
 800166e:	4b0f      	ldr	r3, [pc, #60]	; (80016ac <timer_run+0xf4>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2b00      	cmp	r3, #0
 8001674:	dc02      	bgt.n	800167c <timer_run+0xc4>
			timer_flag_5 = 1;		//Time's up
 8001676:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <timer_run+0xf8>)
 8001678:	2201      	movs	r2, #1
 800167a:	601a      	str	r2, [r3, #0]
		}
	}
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr
 8001684:	200000c0 	.word	0x200000c0
 8001688:	200000a8 	.word	0x200000a8
 800168c:	200000c4 	.word	0x200000c4
 8001690:	200000ac 	.word	0x200000ac
 8001694:	200000c8 	.word	0x200000c8
 8001698:	200000b0 	.word	0x200000b0
 800169c:	200000cc 	.word	0x200000cc
 80016a0:	200000b4 	.word	0x200000b4
 80016a4:	200000d0 	.word	0x200000d0
 80016a8:	200000b8 	.word	0x200000b8
 80016ac:	200000d4 	.word	0x200000d4
 80016b0:	200000bc 	.word	0x200000bc

080016b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016ba:	4b15      	ldr	r3, [pc, #84]	; (8001710 <HAL_MspInit+0x5c>)
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	4a14      	ldr	r2, [pc, #80]	; (8001710 <HAL_MspInit+0x5c>)
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	6193      	str	r3, [r2, #24]
 80016c6:	4b12      	ldr	r3, [pc, #72]	; (8001710 <HAL_MspInit+0x5c>)
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	60bb      	str	r3, [r7, #8]
 80016d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016d2:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <HAL_MspInit+0x5c>)
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	4a0e      	ldr	r2, [pc, #56]	; (8001710 <HAL_MspInit+0x5c>)
 80016d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016dc:	61d3      	str	r3, [r2, #28]
 80016de:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <HAL_MspInit+0x5c>)
 80016e0:	69db      	ldr	r3, [r3, #28]
 80016e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e6:	607b      	str	r3, [r7, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80016ea:	4b0a      	ldr	r3, [pc, #40]	; (8001714 <HAL_MspInit+0x60>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	4a04      	ldr	r2, [pc, #16]	; (8001714 <HAL_MspInit+0x60>)
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001706:	bf00      	nop
 8001708:	3714      	adds	r7, #20
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr
 8001710:	40021000 	.word	0x40021000
 8001714:	40010000 	.word	0x40010000

08001718 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001728:	d113      	bne.n	8001752 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800172a:	4b0c      	ldr	r3, [pc, #48]	; (800175c <HAL_TIM_Base_MspInit+0x44>)
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	4a0b      	ldr	r2, [pc, #44]	; (800175c <HAL_TIM_Base_MspInit+0x44>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	61d3      	str	r3, [r2, #28]
 8001736:	4b09      	ldr	r3, [pc, #36]	; (800175c <HAL_TIM_Base_MspInit+0x44>)
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001742:	2200      	movs	r2, #0
 8001744:	2100      	movs	r1, #0
 8001746:	201c      	movs	r0, #28
 8001748:	f000 f9a1 	bl	8001a8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800174c:	201c      	movs	r0, #28
 800174e:	f000 f9ba 	bl	8001ac6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001752:	bf00      	nop
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40021000 	.word	0x40021000

08001760 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001764:	e7fe      	b.n	8001764 <NMI_Handler+0x4>

08001766 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800176a:	e7fe      	b.n	800176a <HardFault_Handler+0x4>

0800176c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001770:	e7fe      	b.n	8001770 <MemManage_Handler+0x4>

08001772 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001772:	b480      	push	{r7}
 8001774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001776:	e7fe      	b.n	8001776 <BusFault_Handler+0x4>

08001778 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800177c:	e7fe      	b.n	800177c <UsageFault_Handler+0x4>

0800177e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800177e:	b480      	push	{r7}
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	46bd      	mov	sp, r7
 8001786:	bc80      	pop	{r7}
 8001788:	4770      	bx	lr

0800178a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800178a:	b480      	push	{r7}
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	46bd      	mov	sp, r7
 8001792:	bc80      	pop	{r7}
 8001794:	4770      	bx	lr

08001796 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001796:	b480      	push	{r7}
 8001798:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	46bd      	mov	sp, r7
 800179e:	bc80      	pop	{r7}
 80017a0:	4770      	bx	lr

080017a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017a6:	f000 f87f 	bl	80018a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
	...

080017b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017b4:	4802      	ldr	r0, [pc, #8]	; (80017c0 <TIM2_IRQHandler+0x10>)
 80017b6:	f000 ffdb 	bl	8002770 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	200000d8 	.word	0x200000d8

080017c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bc80      	pop	{r7}
 80017ce:	4770      	bx	lr

080017d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017d0:	f7ff fff8 	bl	80017c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017d4:	480b      	ldr	r0, [pc, #44]	; (8001804 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80017d6:	490c      	ldr	r1, [pc, #48]	; (8001808 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80017d8:	4a0c      	ldr	r2, [pc, #48]	; (800180c <LoopFillZerobss+0x16>)
  movs r3, #0
 80017da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017dc:	e002      	b.n	80017e4 <LoopCopyDataInit>

080017de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017e2:	3304      	adds	r3, #4

080017e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017e8:	d3f9      	bcc.n	80017de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ea:	4a09      	ldr	r2, [pc, #36]	; (8001810 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80017ec:	4c09      	ldr	r4, [pc, #36]	; (8001814 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017f0:	e001      	b.n	80017f6 <LoopFillZerobss>

080017f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017f4:	3204      	adds	r2, #4

080017f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017f8:	d3fb      	bcc.n	80017f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017fa:	f001 faf9 	bl	8002df0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017fe:	f7ff fb9b 	bl	8000f38 <main>
  bx lr
 8001802:	4770      	bx	lr
  ldr r0, =_sdata
 8001804:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001808:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 800180c:	08002e8c 	.word	0x08002e8c
  ldr r2, =_sbss
 8001810:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8001814:	20000124 	.word	0x20000124

08001818 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001818:	e7fe      	b.n	8001818 <ADC1_2_IRQHandler>
	...

0800181c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001820:	4b08      	ldr	r3, [pc, #32]	; (8001844 <HAL_Init+0x28>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a07      	ldr	r2, [pc, #28]	; (8001844 <HAL_Init+0x28>)
 8001826:	f043 0310 	orr.w	r3, r3, #16
 800182a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800182c:	2003      	movs	r0, #3
 800182e:	f000 f923 	bl	8001a78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001832:	200f      	movs	r0, #15
 8001834:	f000 f808 	bl	8001848 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001838:	f7ff ff3c 	bl	80016b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40022000 	.word	0x40022000

08001848 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001850:	4b12      	ldr	r3, [pc, #72]	; (800189c <HAL_InitTick+0x54>)
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	4b12      	ldr	r3, [pc, #72]	; (80018a0 <HAL_InitTick+0x58>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	4619      	mov	r1, r3
 800185a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800185e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001862:	fbb2 f3f3 	udiv	r3, r2, r3
 8001866:	4618      	mov	r0, r3
 8001868:	f000 f93b 	bl	8001ae2 <HAL_SYSTICK_Config>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e00e      	b.n	8001894 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2b0f      	cmp	r3, #15
 800187a:	d80a      	bhi.n	8001892 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800187c:	2200      	movs	r2, #0
 800187e:	6879      	ldr	r1, [r7, #4]
 8001880:	f04f 30ff 	mov.w	r0, #4294967295
 8001884:	f000 f903 	bl	8001a8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001888:	4a06      	ldr	r2, [pc, #24]	; (80018a4 <HAL_InitTick+0x5c>)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800188e:	2300      	movs	r3, #0
 8001890:	e000      	b.n	8001894 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
}
 8001894:	4618      	mov	r0, r3
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	2000004c 	.word	0x2000004c
 80018a0:	20000054 	.word	0x20000054
 80018a4:	20000050 	.word	0x20000050

080018a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018ac:	4b05      	ldr	r3, [pc, #20]	; (80018c4 <HAL_IncTick+0x1c>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	461a      	mov	r2, r3
 80018b2:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <HAL_IncTick+0x20>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4413      	add	r3, r2
 80018b8:	4a03      	ldr	r2, [pc, #12]	; (80018c8 <HAL_IncTick+0x20>)
 80018ba:	6013      	str	r3, [r2, #0]
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	bc80      	pop	{r7}
 80018c2:	4770      	bx	lr
 80018c4:	20000054 	.word	0x20000054
 80018c8:	20000120 	.word	0x20000120

080018cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  return uwTick;
 80018d0:	4b02      	ldr	r3, [pc, #8]	; (80018dc <HAL_GetTick+0x10>)
 80018d2:	681b      	ldr	r3, [r3, #0]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr
 80018dc:	20000120 	.word	0x20000120

080018e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018f0:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <__NVIC_SetPriorityGrouping+0x44>)
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018f6:	68ba      	ldr	r2, [r7, #8]
 80018f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018fc:	4013      	ands	r3, r2
 80018fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001908:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800190c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001910:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001912:	4a04      	ldr	r2, [pc, #16]	; (8001924 <__NVIC_SetPriorityGrouping+0x44>)
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	60d3      	str	r3, [r2, #12]
}
 8001918:	bf00      	nop
 800191a:	3714      	adds	r7, #20
 800191c:	46bd      	mov	sp, r7
 800191e:	bc80      	pop	{r7}
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800192c:	4b04      	ldr	r3, [pc, #16]	; (8001940 <__NVIC_GetPriorityGrouping+0x18>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	0a1b      	lsrs	r3, r3, #8
 8001932:	f003 0307 	and.w	r3, r3, #7
}
 8001936:	4618      	mov	r0, r3
 8001938:	46bd      	mov	sp, r7
 800193a:	bc80      	pop	{r7}
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800194e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001952:	2b00      	cmp	r3, #0
 8001954:	db0b      	blt.n	800196e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	f003 021f 	and.w	r2, r3, #31
 800195c:	4906      	ldr	r1, [pc, #24]	; (8001978 <__NVIC_EnableIRQ+0x34>)
 800195e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001962:	095b      	lsrs	r3, r3, #5
 8001964:	2001      	movs	r0, #1
 8001966:	fa00 f202 	lsl.w	r2, r0, r2
 800196a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800196e:	bf00      	nop
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr
 8001978:	e000e100 	.word	0xe000e100

0800197c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	6039      	str	r1, [r7, #0]
 8001986:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198c:	2b00      	cmp	r3, #0
 800198e:	db0a      	blt.n	80019a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	b2da      	uxtb	r2, r3
 8001994:	490c      	ldr	r1, [pc, #48]	; (80019c8 <__NVIC_SetPriority+0x4c>)
 8001996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199a:	0112      	lsls	r2, r2, #4
 800199c:	b2d2      	uxtb	r2, r2
 800199e:	440b      	add	r3, r1
 80019a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019a4:	e00a      	b.n	80019bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	b2da      	uxtb	r2, r3
 80019aa:	4908      	ldr	r1, [pc, #32]	; (80019cc <__NVIC_SetPriority+0x50>)
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	f003 030f 	and.w	r3, r3, #15
 80019b2:	3b04      	subs	r3, #4
 80019b4:	0112      	lsls	r2, r2, #4
 80019b6:	b2d2      	uxtb	r2, r2
 80019b8:	440b      	add	r3, r1
 80019ba:	761a      	strb	r2, [r3, #24]
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bc80      	pop	{r7}
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	e000e100 	.word	0xe000e100
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b089      	sub	sp, #36	; 0x24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	f1c3 0307 	rsb	r3, r3, #7
 80019ea:	2b04      	cmp	r3, #4
 80019ec:	bf28      	it	cs
 80019ee:	2304      	movcs	r3, #4
 80019f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	3304      	adds	r3, #4
 80019f6:	2b06      	cmp	r3, #6
 80019f8:	d902      	bls.n	8001a00 <NVIC_EncodePriority+0x30>
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	3b03      	subs	r3, #3
 80019fe:	e000      	b.n	8001a02 <NVIC_EncodePriority+0x32>
 8001a00:	2300      	movs	r3, #0
 8001a02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a04:	f04f 32ff 	mov.w	r2, #4294967295
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	43da      	mvns	r2, r3
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	401a      	ands	r2, r3
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a18:	f04f 31ff 	mov.w	r1, #4294967295
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a22:	43d9      	mvns	r1, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a28:	4313      	orrs	r3, r2
         );
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3724      	adds	r7, #36	; 0x24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr

08001a34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a44:	d301      	bcc.n	8001a4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a46:	2301      	movs	r3, #1
 8001a48:	e00f      	b.n	8001a6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a4a:	4a0a      	ldr	r2, [pc, #40]	; (8001a74 <SysTick_Config+0x40>)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a52:	210f      	movs	r1, #15
 8001a54:	f04f 30ff 	mov.w	r0, #4294967295
 8001a58:	f7ff ff90 	bl	800197c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a5c:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <SysTick_Config+0x40>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a62:	4b04      	ldr	r3, [pc, #16]	; (8001a74 <SysTick_Config+0x40>)
 8001a64:	2207      	movs	r2, #7
 8001a66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	e000e010 	.word	0xe000e010

08001a78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f7ff ff2d 	bl	80018e0 <__NVIC_SetPriorityGrouping>
}
 8001a86:	bf00      	nop
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b086      	sub	sp, #24
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	4603      	mov	r3, r0
 8001a96:	60b9      	str	r1, [r7, #8]
 8001a98:	607a      	str	r2, [r7, #4]
 8001a9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001aa0:	f7ff ff42 	bl	8001928 <__NVIC_GetPriorityGrouping>
 8001aa4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	68b9      	ldr	r1, [r7, #8]
 8001aaa:	6978      	ldr	r0, [r7, #20]
 8001aac:	f7ff ff90 	bl	80019d0 <NVIC_EncodePriority>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ab6:	4611      	mov	r1, r2
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff ff5f 	bl	800197c <__NVIC_SetPriority>
}
 8001abe:	bf00      	nop
 8001ac0:	3718      	adds	r7, #24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b082      	sub	sp, #8
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	4603      	mov	r3, r0
 8001ace:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff ff35 	bl	8001944 <__NVIC_EnableIRQ>
}
 8001ada:	bf00      	nop
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b082      	sub	sp, #8
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f7ff ffa2 	bl	8001a34 <SysTick_Config>
 8001af0:	4603      	mov	r3, r0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
	...

08001afc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b08b      	sub	sp, #44	; 0x2c
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b06:	2300      	movs	r3, #0
 8001b08:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b0e:	e148      	b.n	8001da2 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b10:	2201      	movs	r2, #1
 8001b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	69fa      	ldr	r2, [r7, #28]
 8001b20:	4013      	ands	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	f040 8137 	bne.w	8001d9c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	4aa3      	ldr	r2, [pc, #652]	; (8001dc0 <HAL_GPIO_Init+0x2c4>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d05e      	beq.n	8001bf6 <HAL_GPIO_Init+0xfa>
 8001b38:	4aa1      	ldr	r2, [pc, #644]	; (8001dc0 <HAL_GPIO_Init+0x2c4>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d875      	bhi.n	8001c2a <HAL_GPIO_Init+0x12e>
 8001b3e:	4aa1      	ldr	r2, [pc, #644]	; (8001dc4 <HAL_GPIO_Init+0x2c8>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d058      	beq.n	8001bf6 <HAL_GPIO_Init+0xfa>
 8001b44:	4a9f      	ldr	r2, [pc, #636]	; (8001dc4 <HAL_GPIO_Init+0x2c8>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d86f      	bhi.n	8001c2a <HAL_GPIO_Init+0x12e>
 8001b4a:	4a9f      	ldr	r2, [pc, #636]	; (8001dc8 <HAL_GPIO_Init+0x2cc>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d052      	beq.n	8001bf6 <HAL_GPIO_Init+0xfa>
 8001b50:	4a9d      	ldr	r2, [pc, #628]	; (8001dc8 <HAL_GPIO_Init+0x2cc>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d869      	bhi.n	8001c2a <HAL_GPIO_Init+0x12e>
 8001b56:	4a9d      	ldr	r2, [pc, #628]	; (8001dcc <HAL_GPIO_Init+0x2d0>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d04c      	beq.n	8001bf6 <HAL_GPIO_Init+0xfa>
 8001b5c:	4a9b      	ldr	r2, [pc, #620]	; (8001dcc <HAL_GPIO_Init+0x2d0>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d863      	bhi.n	8001c2a <HAL_GPIO_Init+0x12e>
 8001b62:	4a9b      	ldr	r2, [pc, #620]	; (8001dd0 <HAL_GPIO_Init+0x2d4>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d046      	beq.n	8001bf6 <HAL_GPIO_Init+0xfa>
 8001b68:	4a99      	ldr	r2, [pc, #612]	; (8001dd0 <HAL_GPIO_Init+0x2d4>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d85d      	bhi.n	8001c2a <HAL_GPIO_Init+0x12e>
 8001b6e:	2b12      	cmp	r3, #18
 8001b70:	d82a      	bhi.n	8001bc8 <HAL_GPIO_Init+0xcc>
 8001b72:	2b12      	cmp	r3, #18
 8001b74:	d859      	bhi.n	8001c2a <HAL_GPIO_Init+0x12e>
 8001b76:	a201      	add	r2, pc, #4	; (adr r2, 8001b7c <HAL_GPIO_Init+0x80>)
 8001b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b7c:	08001bf7 	.word	0x08001bf7
 8001b80:	08001bd1 	.word	0x08001bd1
 8001b84:	08001be3 	.word	0x08001be3
 8001b88:	08001c25 	.word	0x08001c25
 8001b8c:	08001c2b 	.word	0x08001c2b
 8001b90:	08001c2b 	.word	0x08001c2b
 8001b94:	08001c2b 	.word	0x08001c2b
 8001b98:	08001c2b 	.word	0x08001c2b
 8001b9c:	08001c2b 	.word	0x08001c2b
 8001ba0:	08001c2b 	.word	0x08001c2b
 8001ba4:	08001c2b 	.word	0x08001c2b
 8001ba8:	08001c2b 	.word	0x08001c2b
 8001bac:	08001c2b 	.word	0x08001c2b
 8001bb0:	08001c2b 	.word	0x08001c2b
 8001bb4:	08001c2b 	.word	0x08001c2b
 8001bb8:	08001c2b 	.word	0x08001c2b
 8001bbc:	08001c2b 	.word	0x08001c2b
 8001bc0:	08001bd9 	.word	0x08001bd9
 8001bc4:	08001bed 	.word	0x08001bed
 8001bc8:	4a82      	ldr	r2, [pc, #520]	; (8001dd4 <HAL_GPIO_Init+0x2d8>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d013      	beq.n	8001bf6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001bce:	e02c      	b.n	8001c2a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	623b      	str	r3, [r7, #32]
          break;
 8001bd6:	e029      	b.n	8001c2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	3304      	adds	r3, #4
 8001bde:	623b      	str	r3, [r7, #32]
          break;
 8001be0:	e024      	b.n	8001c2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	3308      	adds	r3, #8
 8001be8:	623b      	str	r3, [r7, #32]
          break;
 8001bea:	e01f      	b.n	8001c2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	330c      	adds	r3, #12
 8001bf2:	623b      	str	r3, [r7, #32]
          break;
 8001bf4:	e01a      	b.n	8001c2c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d102      	bne.n	8001c04 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bfe:	2304      	movs	r3, #4
 8001c00:	623b      	str	r3, [r7, #32]
          break;
 8001c02:	e013      	b.n	8001c2c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d105      	bne.n	8001c18 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c0c:	2308      	movs	r3, #8
 8001c0e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	69fa      	ldr	r2, [r7, #28]
 8001c14:	611a      	str	r2, [r3, #16]
          break;
 8001c16:	e009      	b.n	8001c2c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c18:	2308      	movs	r3, #8
 8001c1a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	69fa      	ldr	r2, [r7, #28]
 8001c20:	615a      	str	r2, [r3, #20]
          break;
 8001c22:	e003      	b.n	8001c2c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c24:	2300      	movs	r3, #0
 8001c26:	623b      	str	r3, [r7, #32]
          break;
 8001c28:	e000      	b.n	8001c2c <HAL_GPIO_Init+0x130>
          break;
 8001c2a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	2bff      	cmp	r3, #255	; 0xff
 8001c30:	d801      	bhi.n	8001c36 <HAL_GPIO_Init+0x13a>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	e001      	b.n	8001c3a <HAL_GPIO_Init+0x13e>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	3304      	adds	r3, #4
 8001c3a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	2bff      	cmp	r3, #255	; 0xff
 8001c40:	d802      	bhi.n	8001c48 <HAL_GPIO_Init+0x14c>
 8001c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	e002      	b.n	8001c4e <HAL_GPIO_Init+0x152>
 8001c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4a:	3b08      	subs	r3, #8
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	210f      	movs	r1, #15
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	401a      	ands	r2, r3
 8001c60:	6a39      	ldr	r1, [r7, #32]
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	fa01 f303 	lsl.w	r3, r1, r3
 8001c68:	431a      	orrs	r2, r3
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f000 8090 	beq.w	8001d9c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c7c:	4b56      	ldr	r3, [pc, #344]	; (8001dd8 <HAL_GPIO_Init+0x2dc>)
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	4a55      	ldr	r2, [pc, #340]	; (8001dd8 <HAL_GPIO_Init+0x2dc>)
 8001c82:	f043 0301 	orr.w	r3, r3, #1
 8001c86:	6193      	str	r3, [r2, #24]
 8001c88:	4b53      	ldr	r3, [pc, #332]	; (8001dd8 <HAL_GPIO_Init+0x2dc>)
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	f003 0301 	and.w	r3, r3, #1
 8001c90:	60bb      	str	r3, [r7, #8]
 8001c92:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c94:	4a51      	ldr	r2, [pc, #324]	; (8001ddc <HAL_GPIO_Init+0x2e0>)
 8001c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c98:	089b      	lsrs	r3, r3, #2
 8001c9a:	3302      	adds	r3, #2
 8001c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ca0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca4:	f003 0303 	and.w	r3, r3, #3
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	220f      	movs	r2, #15
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4a49      	ldr	r2, [pc, #292]	; (8001de0 <HAL_GPIO_Init+0x2e4>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d00d      	beq.n	8001cdc <HAL_GPIO_Init+0x1e0>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4a48      	ldr	r2, [pc, #288]	; (8001de4 <HAL_GPIO_Init+0x2e8>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d007      	beq.n	8001cd8 <HAL_GPIO_Init+0x1dc>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4a47      	ldr	r2, [pc, #284]	; (8001de8 <HAL_GPIO_Init+0x2ec>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d101      	bne.n	8001cd4 <HAL_GPIO_Init+0x1d8>
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	e004      	b.n	8001cde <HAL_GPIO_Init+0x1e2>
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e002      	b.n	8001cde <HAL_GPIO_Init+0x1e2>
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e000      	b.n	8001cde <HAL_GPIO_Init+0x1e2>
 8001cdc:	2300      	movs	r3, #0
 8001cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ce0:	f002 0203 	and.w	r2, r2, #3
 8001ce4:	0092      	lsls	r2, r2, #2
 8001ce6:	4093      	lsls	r3, r2
 8001ce8:	68fa      	ldr	r2, [r7, #12]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001cee:	493b      	ldr	r1, [pc, #236]	; (8001ddc <HAL_GPIO_Init+0x2e0>)
 8001cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf2:	089b      	lsrs	r3, r3, #2
 8001cf4:	3302      	adds	r3, #2
 8001cf6:	68fa      	ldr	r2, [r7, #12]
 8001cf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d006      	beq.n	8001d16 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d08:	4b38      	ldr	r3, [pc, #224]	; (8001dec <HAL_GPIO_Init+0x2f0>)
 8001d0a:	689a      	ldr	r2, [r3, #8]
 8001d0c:	4937      	ldr	r1, [pc, #220]	; (8001dec <HAL_GPIO_Init+0x2f0>)
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	608b      	str	r3, [r1, #8]
 8001d14:	e006      	b.n	8001d24 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d16:	4b35      	ldr	r3, [pc, #212]	; (8001dec <HAL_GPIO_Init+0x2f0>)
 8001d18:	689a      	ldr	r2, [r3, #8]
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	4933      	ldr	r1, [pc, #204]	; (8001dec <HAL_GPIO_Init+0x2f0>)
 8001d20:	4013      	ands	r3, r2
 8001d22:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d006      	beq.n	8001d3e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d30:	4b2e      	ldr	r3, [pc, #184]	; (8001dec <HAL_GPIO_Init+0x2f0>)
 8001d32:	68da      	ldr	r2, [r3, #12]
 8001d34:	492d      	ldr	r1, [pc, #180]	; (8001dec <HAL_GPIO_Init+0x2f0>)
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	60cb      	str	r3, [r1, #12]
 8001d3c:	e006      	b.n	8001d4c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d3e:	4b2b      	ldr	r3, [pc, #172]	; (8001dec <HAL_GPIO_Init+0x2f0>)
 8001d40:	68da      	ldr	r2, [r3, #12]
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	43db      	mvns	r3, r3
 8001d46:	4929      	ldr	r1, [pc, #164]	; (8001dec <HAL_GPIO_Init+0x2f0>)
 8001d48:	4013      	ands	r3, r2
 8001d4a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d006      	beq.n	8001d66 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d58:	4b24      	ldr	r3, [pc, #144]	; (8001dec <HAL_GPIO_Init+0x2f0>)
 8001d5a:	685a      	ldr	r2, [r3, #4]
 8001d5c:	4923      	ldr	r1, [pc, #140]	; (8001dec <HAL_GPIO_Init+0x2f0>)
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	604b      	str	r3, [r1, #4]
 8001d64:	e006      	b.n	8001d74 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d66:	4b21      	ldr	r3, [pc, #132]	; (8001dec <HAL_GPIO_Init+0x2f0>)
 8001d68:	685a      	ldr	r2, [r3, #4]
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	491f      	ldr	r1, [pc, #124]	; (8001dec <HAL_GPIO_Init+0x2f0>)
 8001d70:	4013      	ands	r3, r2
 8001d72:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d006      	beq.n	8001d8e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d80:	4b1a      	ldr	r3, [pc, #104]	; (8001dec <HAL_GPIO_Init+0x2f0>)
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	4919      	ldr	r1, [pc, #100]	; (8001dec <HAL_GPIO_Init+0x2f0>)
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	600b      	str	r3, [r1, #0]
 8001d8c:	e006      	b.n	8001d9c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d8e:	4b17      	ldr	r3, [pc, #92]	; (8001dec <HAL_GPIO_Init+0x2f0>)
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	43db      	mvns	r3, r3
 8001d96:	4915      	ldr	r1, [pc, #84]	; (8001dec <HAL_GPIO_Init+0x2f0>)
 8001d98:	4013      	ands	r3, r2
 8001d9a:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9e:	3301      	adds	r3, #1
 8001da0:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da8:	fa22 f303 	lsr.w	r3, r2, r3
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	f47f aeaf 	bne.w	8001b10 <HAL_GPIO_Init+0x14>
  }
}
 8001db2:	bf00      	nop
 8001db4:	bf00      	nop
 8001db6:	372c      	adds	r7, #44	; 0x2c
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bc80      	pop	{r7}
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	10320000 	.word	0x10320000
 8001dc4:	10310000 	.word	0x10310000
 8001dc8:	10220000 	.word	0x10220000
 8001dcc:	10210000 	.word	0x10210000
 8001dd0:	10120000 	.word	0x10120000
 8001dd4:	10110000 	.word	0x10110000
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	40010000 	.word	0x40010000
 8001de0:	40010800 	.word	0x40010800
 8001de4:	40010c00 	.word	0x40010c00
 8001de8:	40011000 	.word	0x40011000
 8001dec:	40010400 	.word	0x40010400

08001df0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	460b      	mov	r3, r1
 8001dfa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689a      	ldr	r2, [r3, #8]
 8001e00:	887b      	ldrh	r3, [r7, #2]
 8001e02:	4013      	ands	r3, r2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d002      	beq.n	8001e0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	73fb      	strb	r3, [r7, #15]
 8001e0c:	e001      	b.n	8001e12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3714      	adds	r7, #20
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bc80      	pop	{r7}
 8001e1c:	4770      	bx	lr

08001e1e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b083      	sub	sp, #12
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
 8001e26:	460b      	mov	r3, r1
 8001e28:	807b      	strh	r3, [r7, #2]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e2e:	787b      	ldrb	r3, [r7, #1]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d003      	beq.n	8001e3c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e34:	887a      	ldrh	r2, [r7, #2]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e3a:	e003      	b.n	8001e44 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e3c:	887b      	ldrh	r3, [r7, #2]
 8001e3e:	041a      	lsls	r2, r3, #16
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	611a      	str	r2, [r3, #16]
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bc80      	pop	{r7}
 8001e4c:	4770      	bx	lr

08001e4e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	b085      	sub	sp, #20
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
 8001e56:	460b      	mov	r3, r1
 8001e58:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e60:	887a      	ldrh	r2, [r7, #2]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	4013      	ands	r3, r2
 8001e66:	041a      	lsls	r2, r3, #16
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	43d9      	mvns	r1, r3
 8001e6c:	887b      	ldrh	r3, [r7, #2]
 8001e6e:	400b      	ands	r3, r1
 8001e70:	431a      	orrs	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	611a      	str	r2, [r3, #16]
}
 8001e76:	bf00      	nop
 8001e78:	3714      	adds	r7, #20
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bc80      	pop	{r7}
 8001e7e:	4770      	bx	lr

08001e80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e26c      	b.n	800236c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f000 8087 	beq.w	8001fae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ea0:	4b92      	ldr	r3, [pc, #584]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f003 030c 	and.w	r3, r3, #12
 8001ea8:	2b04      	cmp	r3, #4
 8001eaa:	d00c      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001eac:	4b8f      	ldr	r3, [pc, #572]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f003 030c 	and.w	r3, r3, #12
 8001eb4:	2b08      	cmp	r3, #8
 8001eb6:	d112      	bne.n	8001ede <HAL_RCC_OscConfig+0x5e>
 8001eb8:	4b8c      	ldr	r3, [pc, #560]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ec4:	d10b      	bne.n	8001ede <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ec6:	4b89      	ldr	r3, [pc, #548]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d06c      	beq.n	8001fac <HAL_RCC_OscConfig+0x12c>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d168      	bne.n	8001fac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e246      	b.n	800236c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ee6:	d106      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x76>
 8001ee8:	4b80      	ldr	r3, [pc, #512]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a7f      	ldr	r2, [pc, #508]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001eee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ef2:	6013      	str	r3, [r2, #0]
 8001ef4:	e02e      	b.n	8001f54 <HAL_RCC_OscConfig+0xd4>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d10c      	bne.n	8001f18 <HAL_RCC_OscConfig+0x98>
 8001efe:	4b7b      	ldr	r3, [pc, #492]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a7a      	ldr	r2, [pc, #488]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001f04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f08:	6013      	str	r3, [r2, #0]
 8001f0a:	4b78      	ldr	r3, [pc, #480]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a77      	ldr	r2, [pc, #476]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001f10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f14:	6013      	str	r3, [r2, #0]
 8001f16:	e01d      	b.n	8001f54 <HAL_RCC_OscConfig+0xd4>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f20:	d10c      	bne.n	8001f3c <HAL_RCC_OscConfig+0xbc>
 8001f22:	4b72      	ldr	r3, [pc, #456]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a71      	ldr	r2, [pc, #452]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001f28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f2c:	6013      	str	r3, [r2, #0]
 8001f2e:	4b6f      	ldr	r3, [pc, #444]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a6e      	ldr	r2, [pc, #440]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f38:	6013      	str	r3, [r2, #0]
 8001f3a:	e00b      	b.n	8001f54 <HAL_RCC_OscConfig+0xd4>
 8001f3c:	4b6b      	ldr	r3, [pc, #428]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a6a      	ldr	r2, [pc, #424]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001f42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f46:	6013      	str	r3, [r2, #0]
 8001f48:	4b68      	ldr	r3, [pc, #416]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a67      	ldr	r2, [pc, #412]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001f4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f52:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d013      	beq.n	8001f84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5c:	f7ff fcb6 	bl	80018cc <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f64:	f7ff fcb2 	bl	80018cc <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b64      	cmp	r3, #100	; 0x64
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e1fa      	b.n	800236c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f76:	4b5d      	ldr	r3, [pc, #372]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d0f0      	beq.n	8001f64 <HAL_RCC_OscConfig+0xe4>
 8001f82:	e014      	b.n	8001fae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f84:	f7ff fca2 	bl	80018cc <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f8c:	f7ff fc9e 	bl	80018cc <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b64      	cmp	r3, #100	; 0x64
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e1e6      	b.n	800236c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f9e:	4b53      	ldr	r3, [pc, #332]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1f0      	bne.n	8001f8c <HAL_RCC_OscConfig+0x10c>
 8001faa:	e000      	b.n	8001fae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d063      	beq.n	8002082 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fba:	4b4c      	ldr	r3, [pc, #304]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f003 030c 	and.w	r3, r3, #12
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d00b      	beq.n	8001fde <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001fc6:	4b49      	ldr	r3, [pc, #292]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f003 030c 	and.w	r3, r3, #12
 8001fce:	2b08      	cmp	r3, #8
 8001fd0:	d11c      	bne.n	800200c <HAL_RCC_OscConfig+0x18c>
 8001fd2:	4b46      	ldr	r3, [pc, #280]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d116      	bne.n	800200c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fde:	4b43      	ldr	r3, [pc, #268]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d005      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x176>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d001      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e1ba      	b.n	800236c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff6:	4b3d      	ldr	r3, [pc, #244]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	4939      	ldr	r1, [pc, #228]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8002006:	4313      	orrs	r3, r2
 8002008:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800200a:	e03a      	b.n	8002082 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d020      	beq.n	8002056 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002014:	4b36      	ldr	r3, [pc, #216]	; (80020f0 <HAL_RCC_OscConfig+0x270>)
 8002016:	2201      	movs	r2, #1
 8002018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201a:	f7ff fc57 	bl	80018cc <HAL_GetTick>
 800201e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002020:	e008      	b.n	8002034 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002022:	f7ff fc53 	bl	80018cc <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	2b02      	cmp	r3, #2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e19b      	b.n	800236c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002034:	4b2d      	ldr	r3, [pc, #180]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d0f0      	beq.n	8002022 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002040:	4b2a      	ldr	r3, [pc, #168]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	695b      	ldr	r3, [r3, #20]
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4927      	ldr	r1, [pc, #156]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8002050:	4313      	orrs	r3, r2
 8002052:	600b      	str	r3, [r1, #0]
 8002054:	e015      	b.n	8002082 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002056:	4b26      	ldr	r3, [pc, #152]	; (80020f0 <HAL_RCC_OscConfig+0x270>)
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800205c:	f7ff fc36 	bl	80018cc <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002064:	f7ff fc32 	bl	80018cc <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e17a      	b.n	800236c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002076:	4b1d      	ldr	r3, [pc, #116]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1f0      	bne.n	8002064 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0308 	and.w	r3, r3, #8
 800208a:	2b00      	cmp	r3, #0
 800208c:	d03a      	beq.n	8002104 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d019      	beq.n	80020ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002096:	4b17      	ldr	r3, [pc, #92]	; (80020f4 <HAL_RCC_OscConfig+0x274>)
 8002098:	2201      	movs	r2, #1
 800209a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800209c:	f7ff fc16 	bl	80018cc <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020a4:	f7ff fc12 	bl	80018cc <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e15a      	b.n	800236c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020b6:	4b0d      	ldr	r3, [pc, #52]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 80020b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d0f0      	beq.n	80020a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80020c2:	2001      	movs	r0, #1
 80020c4:	f000 fa9a 	bl	80025fc <RCC_Delay>
 80020c8:	e01c      	b.n	8002104 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020ca:	4b0a      	ldr	r3, [pc, #40]	; (80020f4 <HAL_RCC_OscConfig+0x274>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020d0:	f7ff fbfc 	bl	80018cc <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020d6:	e00f      	b.n	80020f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020d8:	f7ff fbf8 	bl	80018cc <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d908      	bls.n	80020f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e140      	b.n	800236c <HAL_RCC_OscConfig+0x4ec>
 80020ea:	bf00      	nop
 80020ec:	40021000 	.word	0x40021000
 80020f0:	42420000 	.word	0x42420000
 80020f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020f8:	4b9e      	ldr	r3, [pc, #632]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 80020fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d1e9      	bne.n	80020d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0304 	and.w	r3, r3, #4
 800210c:	2b00      	cmp	r3, #0
 800210e:	f000 80a6 	beq.w	800225e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002112:	2300      	movs	r3, #0
 8002114:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002116:	4b97      	ldr	r3, [pc, #604]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 8002118:	69db      	ldr	r3, [r3, #28]
 800211a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d10d      	bne.n	800213e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002122:	4b94      	ldr	r3, [pc, #592]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	4a93      	ldr	r2, [pc, #588]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 8002128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800212c:	61d3      	str	r3, [r2, #28]
 800212e:	4b91      	ldr	r3, [pc, #580]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 8002130:	69db      	ldr	r3, [r3, #28]
 8002132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002136:	60bb      	str	r3, [r7, #8]
 8002138:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800213a:	2301      	movs	r3, #1
 800213c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800213e:	4b8e      	ldr	r3, [pc, #568]	; (8002378 <HAL_RCC_OscConfig+0x4f8>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002146:	2b00      	cmp	r3, #0
 8002148:	d118      	bne.n	800217c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800214a:	4b8b      	ldr	r3, [pc, #556]	; (8002378 <HAL_RCC_OscConfig+0x4f8>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a8a      	ldr	r2, [pc, #552]	; (8002378 <HAL_RCC_OscConfig+0x4f8>)
 8002150:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002154:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002156:	f7ff fbb9 	bl	80018cc <HAL_GetTick>
 800215a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800215c:	e008      	b.n	8002170 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800215e:	f7ff fbb5 	bl	80018cc <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b64      	cmp	r3, #100	; 0x64
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e0fd      	b.n	800236c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002170:	4b81      	ldr	r3, [pc, #516]	; (8002378 <HAL_RCC_OscConfig+0x4f8>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002178:	2b00      	cmp	r3, #0
 800217a:	d0f0      	beq.n	800215e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d106      	bne.n	8002192 <HAL_RCC_OscConfig+0x312>
 8002184:	4b7b      	ldr	r3, [pc, #492]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 8002186:	6a1b      	ldr	r3, [r3, #32]
 8002188:	4a7a      	ldr	r2, [pc, #488]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 800218a:	f043 0301 	orr.w	r3, r3, #1
 800218e:	6213      	str	r3, [r2, #32]
 8002190:	e02d      	b.n	80021ee <HAL_RCC_OscConfig+0x36e>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d10c      	bne.n	80021b4 <HAL_RCC_OscConfig+0x334>
 800219a:	4b76      	ldr	r3, [pc, #472]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 800219c:	6a1b      	ldr	r3, [r3, #32]
 800219e:	4a75      	ldr	r2, [pc, #468]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 80021a0:	f023 0301 	bic.w	r3, r3, #1
 80021a4:	6213      	str	r3, [r2, #32]
 80021a6:	4b73      	ldr	r3, [pc, #460]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 80021a8:	6a1b      	ldr	r3, [r3, #32]
 80021aa:	4a72      	ldr	r2, [pc, #456]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 80021ac:	f023 0304 	bic.w	r3, r3, #4
 80021b0:	6213      	str	r3, [r2, #32]
 80021b2:	e01c      	b.n	80021ee <HAL_RCC_OscConfig+0x36e>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	2b05      	cmp	r3, #5
 80021ba:	d10c      	bne.n	80021d6 <HAL_RCC_OscConfig+0x356>
 80021bc:	4b6d      	ldr	r3, [pc, #436]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 80021be:	6a1b      	ldr	r3, [r3, #32]
 80021c0:	4a6c      	ldr	r2, [pc, #432]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 80021c2:	f043 0304 	orr.w	r3, r3, #4
 80021c6:	6213      	str	r3, [r2, #32]
 80021c8:	4b6a      	ldr	r3, [pc, #424]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 80021ca:	6a1b      	ldr	r3, [r3, #32]
 80021cc:	4a69      	ldr	r2, [pc, #420]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 80021ce:	f043 0301 	orr.w	r3, r3, #1
 80021d2:	6213      	str	r3, [r2, #32]
 80021d4:	e00b      	b.n	80021ee <HAL_RCC_OscConfig+0x36e>
 80021d6:	4b67      	ldr	r3, [pc, #412]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 80021d8:	6a1b      	ldr	r3, [r3, #32]
 80021da:	4a66      	ldr	r2, [pc, #408]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 80021dc:	f023 0301 	bic.w	r3, r3, #1
 80021e0:	6213      	str	r3, [r2, #32]
 80021e2:	4b64      	ldr	r3, [pc, #400]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 80021e4:	6a1b      	ldr	r3, [r3, #32]
 80021e6:	4a63      	ldr	r2, [pc, #396]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 80021e8:	f023 0304 	bic.w	r3, r3, #4
 80021ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d015      	beq.n	8002222 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021f6:	f7ff fb69 	bl	80018cc <HAL_GetTick>
 80021fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021fc:	e00a      	b.n	8002214 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021fe:	f7ff fb65 	bl	80018cc <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	f241 3288 	movw	r2, #5000	; 0x1388
 800220c:	4293      	cmp	r3, r2
 800220e:	d901      	bls.n	8002214 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e0ab      	b.n	800236c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002214:	4b57      	ldr	r3, [pc, #348]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 8002216:	6a1b      	ldr	r3, [r3, #32]
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d0ee      	beq.n	80021fe <HAL_RCC_OscConfig+0x37e>
 8002220:	e014      	b.n	800224c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002222:	f7ff fb53 	bl	80018cc <HAL_GetTick>
 8002226:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002228:	e00a      	b.n	8002240 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800222a:	f7ff fb4f 	bl	80018cc <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	f241 3288 	movw	r2, #5000	; 0x1388
 8002238:	4293      	cmp	r3, r2
 800223a:	d901      	bls.n	8002240 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e095      	b.n	800236c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002240:	4b4c      	ldr	r3, [pc, #304]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d1ee      	bne.n	800222a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800224c:	7dfb      	ldrb	r3, [r7, #23]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d105      	bne.n	800225e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002252:	4b48      	ldr	r3, [pc, #288]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	4a47      	ldr	r2, [pc, #284]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 8002258:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800225c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	69db      	ldr	r3, [r3, #28]
 8002262:	2b00      	cmp	r3, #0
 8002264:	f000 8081 	beq.w	800236a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002268:	4b42      	ldr	r3, [pc, #264]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f003 030c 	and.w	r3, r3, #12
 8002270:	2b08      	cmp	r3, #8
 8002272:	d061      	beq.n	8002338 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	69db      	ldr	r3, [r3, #28]
 8002278:	2b02      	cmp	r3, #2
 800227a:	d146      	bne.n	800230a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800227c:	4b3f      	ldr	r3, [pc, #252]	; (800237c <HAL_RCC_OscConfig+0x4fc>)
 800227e:	2200      	movs	r2, #0
 8002280:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002282:	f7ff fb23 	bl	80018cc <HAL_GetTick>
 8002286:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002288:	e008      	b.n	800229c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800228a:	f7ff fb1f 	bl	80018cc <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d901      	bls.n	800229c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e067      	b.n	800236c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800229c:	4b35      	ldr	r3, [pc, #212]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d1f0      	bne.n	800228a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a1b      	ldr	r3, [r3, #32]
 80022ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022b0:	d108      	bne.n	80022c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022b2:	4b30      	ldr	r3, [pc, #192]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	492d      	ldr	r1, [pc, #180]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022c4:	4b2b      	ldr	r3, [pc, #172]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a19      	ldr	r1, [r3, #32]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d4:	430b      	orrs	r3, r1
 80022d6:	4927      	ldr	r1, [pc, #156]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022dc:	4b27      	ldr	r3, [pc, #156]	; (800237c <HAL_RCC_OscConfig+0x4fc>)
 80022de:	2201      	movs	r2, #1
 80022e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e2:	f7ff faf3 	bl	80018cc <HAL_GetTick>
 80022e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022e8:	e008      	b.n	80022fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ea:	f7ff faef 	bl	80018cc <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d901      	bls.n	80022fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e037      	b.n	800236c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022fc:	4b1d      	ldr	r3, [pc, #116]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d0f0      	beq.n	80022ea <HAL_RCC_OscConfig+0x46a>
 8002308:	e02f      	b.n	800236a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800230a:	4b1c      	ldr	r3, [pc, #112]	; (800237c <HAL_RCC_OscConfig+0x4fc>)
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002310:	f7ff fadc 	bl	80018cc <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002318:	f7ff fad8 	bl	80018cc <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b02      	cmp	r3, #2
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e020      	b.n	800236c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800232a:	4b12      	ldr	r3, [pc, #72]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1f0      	bne.n	8002318 <HAL_RCC_OscConfig+0x498>
 8002336:	e018      	b.n	800236a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	69db      	ldr	r3, [r3, #28]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d101      	bne.n	8002344 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e013      	b.n	800236c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002344:	4b0b      	ldr	r3, [pc, #44]	; (8002374 <HAL_RCC_OscConfig+0x4f4>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	429a      	cmp	r2, r3
 8002356:	d106      	bne.n	8002366 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002362:	429a      	cmp	r2, r3
 8002364:	d001      	beq.n	800236a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e000      	b.n	800236c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	3718      	adds	r7, #24
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40021000 	.word	0x40021000
 8002378:	40007000 	.word	0x40007000
 800237c:	42420060 	.word	0x42420060

08002380 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d101      	bne.n	8002394 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e0d0      	b.n	8002536 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002394:	4b6a      	ldr	r3, [pc, #424]	; (8002540 <HAL_RCC_ClockConfig+0x1c0>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0307 	and.w	r3, r3, #7
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d910      	bls.n	80023c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023a2:	4b67      	ldr	r3, [pc, #412]	; (8002540 <HAL_RCC_ClockConfig+0x1c0>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f023 0207 	bic.w	r2, r3, #7
 80023aa:	4965      	ldr	r1, [pc, #404]	; (8002540 <HAL_RCC_ClockConfig+0x1c0>)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b2:	4b63      	ldr	r3, [pc, #396]	; (8002540 <HAL_RCC_ClockConfig+0x1c0>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0307 	and.w	r3, r3, #7
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d001      	beq.n	80023c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e0b8      	b.n	8002536 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d020      	beq.n	8002412 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0304 	and.w	r3, r3, #4
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d005      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023dc:	4b59      	ldr	r3, [pc, #356]	; (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	4a58      	ldr	r2, [pc, #352]	; (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 80023e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0308 	and.w	r3, r3, #8
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d005      	beq.n	8002400 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023f4:	4b53      	ldr	r3, [pc, #332]	; (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	4a52      	ldr	r2, [pc, #328]	; (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 80023fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80023fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002400:	4b50      	ldr	r3, [pc, #320]	; (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	494d      	ldr	r1, [pc, #308]	; (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 800240e:	4313      	orrs	r3, r2
 8002410:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b00      	cmp	r3, #0
 800241c:	d040      	beq.n	80024a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d107      	bne.n	8002436 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002426:	4b47      	ldr	r3, [pc, #284]	; (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d115      	bne.n	800245e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e07f      	b.n	8002536 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b02      	cmp	r3, #2
 800243c:	d107      	bne.n	800244e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800243e:	4b41      	ldr	r3, [pc, #260]	; (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d109      	bne.n	800245e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e073      	b.n	8002536 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800244e:	4b3d      	ldr	r3, [pc, #244]	; (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e06b      	b.n	8002536 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800245e:	4b39      	ldr	r3, [pc, #228]	; (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f023 0203 	bic.w	r2, r3, #3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	4936      	ldr	r1, [pc, #216]	; (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 800246c:	4313      	orrs	r3, r2
 800246e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002470:	f7ff fa2c 	bl	80018cc <HAL_GetTick>
 8002474:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002476:	e00a      	b.n	800248e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002478:	f7ff fa28 	bl	80018cc <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	f241 3288 	movw	r2, #5000	; 0x1388
 8002486:	4293      	cmp	r3, r2
 8002488:	d901      	bls.n	800248e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e053      	b.n	8002536 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800248e:	4b2d      	ldr	r3, [pc, #180]	; (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f003 020c 	and.w	r2, r3, #12
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	429a      	cmp	r2, r3
 800249e:	d1eb      	bne.n	8002478 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024a0:	4b27      	ldr	r3, [pc, #156]	; (8002540 <HAL_RCC_ClockConfig+0x1c0>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0307 	and.w	r3, r3, #7
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d210      	bcs.n	80024d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ae:	4b24      	ldr	r3, [pc, #144]	; (8002540 <HAL_RCC_ClockConfig+0x1c0>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f023 0207 	bic.w	r2, r3, #7
 80024b6:	4922      	ldr	r1, [pc, #136]	; (8002540 <HAL_RCC_ClockConfig+0x1c0>)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024be:	4b20      	ldr	r3, [pc, #128]	; (8002540 <HAL_RCC_ClockConfig+0x1c0>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0307 	and.w	r3, r3, #7
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d001      	beq.n	80024d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e032      	b.n	8002536 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0304 	and.w	r3, r3, #4
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d008      	beq.n	80024ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024dc:	4b19      	ldr	r3, [pc, #100]	; (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	4916      	ldr	r1, [pc, #88]	; (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0308 	and.w	r3, r3, #8
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d009      	beq.n	800250e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024fa:	4b12      	ldr	r3, [pc, #72]	; (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	490e      	ldr	r1, [pc, #56]	; (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 800250a:	4313      	orrs	r3, r2
 800250c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800250e:	f000 f821 	bl	8002554 <HAL_RCC_GetSysClockFreq>
 8002512:	4602      	mov	r2, r0
 8002514:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	091b      	lsrs	r3, r3, #4
 800251a:	f003 030f 	and.w	r3, r3, #15
 800251e:	490a      	ldr	r1, [pc, #40]	; (8002548 <HAL_RCC_ClockConfig+0x1c8>)
 8002520:	5ccb      	ldrb	r3, [r1, r3]
 8002522:	fa22 f303 	lsr.w	r3, r2, r3
 8002526:	4a09      	ldr	r2, [pc, #36]	; (800254c <HAL_RCC_ClockConfig+0x1cc>)
 8002528:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800252a:	4b09      	ldr	r3, [pc, #36]	; (8002550 <HAL_RCC_ClockConfig+0x1d0>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff f98a 	bl	8001848 <HAL_InitTick>

  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40022000 	.word	0x40022000
 8002544:	40021000 	.word	0x40021000
 8002548:	08002e60 	.word	0x08002e60
 800254c:	2000004c 	.word	0x2000004c
 8002550:	20000050 	.word	0x20000050

08002554 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002554:	b480      	push	{r7}
 8002556:	b087      	sub	sp, #28
 8002558:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800255a:	2300      	movs	r3, #0
 800255c:	60fb      	str	r3, [r7, #12]
 800255e:	2300      	movs	r3, #0
 8002560:	60bb      	str	r3, [r7, #8]
 8002562:	2300      	movs	r3, #0
 8002564:	617b      	str	r3, [r7, #20]
 8002566:	2300      	movs	r3, #0
 8002568:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800256a:	2300      	movs	r3, #0
 800256c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800256e:	4b1e      	ldr	r3, [pc, #120]	; (80025e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f003 030c 	and.w	r3, r3, #12
 800257a:	2b04      	cmp	r3, #4
 800257c:	d002      	beq.n	8002584 <HAL_RCC_GetSysClockFreq+0x30>
 800257e:	2b08      	cmp	r3, #8
 8002580:	d003      	beq.n	800258a <HAL_RCC_GetSysClockFreq+0x36>
 8002582:	e027      	b.n	80025d4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002584:	4b19      	ldr	r3, [pc, #100]	; (80025ec <HAL_RCC_GetSysClockFreq+0x98>)
 8002586:	613b      	str	r3, [r7, #16]
      break;
 8002588:	e027      	b.n	80025da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	0c9b      	lsrs	r3, r3, #18
 800258e:	f003 030f 	and.w	r3, r3, #15
 8002592:	4a17      	ldr	r2, [pc, #92]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002594:	5cd3      	ldrb	r3, [r2, r3]
 8002596:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d010      	beq.n	80025c4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025a2:	4b11      	ldr	r3, [pc, #68]	; (80025e8 <HAL_RCC_GetSysClockFreq+0x94>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	0c5b      	lsrs	r3, r3, #17
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	4a11      	ldr	r2, [pc, #68]	; (80025f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80025ae:	5cd3      	ldrb	r3, [r2, r3]
 80025b0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a0d      	ldr	r2, [pc, #52]	; (80025ec <HAL_RCC_GetSysClockFreq+0x98>)
 80025b6:	fb02 f203 	mul.w	r2, r2, r3
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c0:	617b      	str	r3, [r7, #20]
 80025c2:	e004      	b.n	80025ce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a0c      	ldr	r2, [pc, #48]	; (80025f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80025c8:	fb02 f303 	mul.w	r3, r2, r3
 80025cc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	613b      	str	r3, [r7, #16]
      break;
 80025d2:	e002      	b.n	80025da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025d4:	4b05      	ldr	r3, [pc, #20]	; (80025ec <HAL_RCC_GetSysClockFreq+0x98>)
 80025d6:	613b      	str	r3, [r7, #16]
      break;
 80025d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025da:	693b      	ldr	r3, [r7, #16]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	371c      	adds	r7, #28
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bc80      	pop	{r7}
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	40021000 	.word	0x40021000
 80025ec:	007a1200 	.word	0x007a1200
 80025f0:	08002e70 	.word	0x08002e70
 80025f4:	08002e80 	.word	0x08002e80
 80025f8:	003d0900 	.word	0x003d0900

080025fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002604:	4b0a      	ldr	r3, [pc, #40]	; (8002630 <RCC_Delay+0x34>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a0a      	ldr	r2, [pc, #40]	; (8002634 <RCC_Delay+0x38>)
 800260a:	fba2 2303 	umull	r2, r3, r2, r3
 800260e:	0a5b      	lsrs	r3, r3, #9
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	fb02 f303 	mul.w	r3, r2, r3
 8002616:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002618:	bf00      	nop
  }
  while (Delay --);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	1e5a      	subs	r2, r3, #1
 800261e:	60fa      	str	r2, [r7, #12]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1f9      	bne.n	8002618 <RCC_Delay+0x1c>
}
 8002624:	bf00      	nop
 8002626:	bf00      	nop
 8002628:	3714      	adds	r7, #20
 800262a:	46bd      	mov	sp, r7
 800262c:	bc80      	pop	{r7}
 800262e:	4770      	bx	lr
 8002630:	2000004c 	.word	0x2000004c
 8002634:	10624dd3 	.word	0x10624dd3

08002638 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d101      	bne.n	800264a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e041      	b.n	80026ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b00      	cmp	r3, #0
 8002654:	d106      	bne.n	8002664 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f7ff f85a 	bl	8001718 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2202      	movs	r2, #2
 8002668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	3304      	adds	r3, #4
 8002674:	4619      	mov	r1, r3
 8002676:	4610      	mov	r0, r2
 8002678:	f000 fa56 	bl	8002b28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
	...

080026d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d001      	beq.n	80026f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e035      	b.n	800275c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2202      	movs	r2, #2
 80026f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68da      	ldr	r2, [r3, #12]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f042 0201 	orr.w	r2, r2, #1
 8002706:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a16      	ldr	r2, [pc, #88]	; (8002768 <HAL_TIM_Base_Start_IT+0x90>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d009      	beq.n	8002726 <HAL_TIM_Base_Start_IT+0x4e>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800271a:	d004      	beq.n	8002726 <HAL_TIM_Base_Start_IT+0x4e>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a12      	ldr	r2, [pc, #72]	; (800276c <HAL_TIM_Base_Start_IT+0x94>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d111      	bne.n	800274a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f003 0307 	and.w	r3, r3, #7
 8002730:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2b06      	cmp	r3, #6
 8002736:	d010      	beq.n	800275a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f042 0201 	orr.w	r2, r2, #1
 8002746:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002748:	e007      	b.n	800275a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f042 0201 	orr.w	r2, r2, #1
 8002758:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	3714      	adds	r7, #20
 8002760:	46bd      	mov	sp, r7
 8002762:	bc80      	pop	{r7}
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	40012c00 	.word	0x40012c00
 800276c:	40000400 	.word	0x40000400

08002770 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d020      	beq.n	80027d4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d01b      	beq.n	80027d4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f06f 0202 	mvn.w	r2, #2
 80027a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2201      	movs	r2, #1
 80027aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	699b      	ldr	r3, [r3, #24]
 80027b2:	f003 0303 	and.w	r3, r3, #3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d003      	beq.n	80027c2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 f998 	bl	8002af0 <HAL_TIM_IC_CaptureCallback>
 80027c0:	e005      	b.n	80027ce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 f98b 	bl	8002ade <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f000 f99a 	bl	8002b02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	f003 0304 	and.w	r3, r3, #4
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d020      	beq.n	8002820 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d01b      	beq.n	8002820 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f06f 0204 	mvn.w	r2, #4
 80027f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2202      	movs	r2, #2
 80027f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002802:	2b00      	cmp	r3, #0
 8002804:	d003      	beq.n	800280e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 f972 	bl	8002af0 <HAL_TIM_IC_CaptureCallback>
 800280c:	e005      	b.n	800281a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 f965 	bl	8002ade <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f000 f974 	bl	8002b02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	f003 0308 	and.w	r3, r3, #8
 8002826:	2b00      	cmp	r3, #0
 8002828:	d020      	beq.n	800286c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f003 0308 	and.w	r3, r3, #8
 8002830:	2b00      	cmp	r3, #0
 8002832:	d01b      	beq.n	800286c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f06f 0208 	mvn.w	r2, #8
 800283c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2204      	movs	r2, #4
 8002842:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	69db      	ldr	r3, [r3, #28]
 800284a:	f003 0303 	and.w	r3, r3, #3
 800284e:	2b00      	cmp	r3, #0
 8002850:	d003      	beq.n	800285a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 f94c 	bl	8002af0 <HAL_TIM_IC_CaptureCallback>
 8002858:	e005      	b.n	8002866 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 f93f 	bl	8002ade <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f000 f94e 	bl	8002b02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	f003 0310 	and.w	r3, r3, #16
 8002872:	2b00      	cmp	r3, #0
 8002874:	d020      	beq.n	80028b8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f003 0310 	and.w	r3, r3, #16
 800287c:	2b00      	cmp	r3, #0
 800287e:	d01b      	beq.n	80028b8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f06f 0210 	mvn.w	r2, #16
 8002888:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2208      	movs	r2, #8
 800288e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	69db      	ldr	r3, [r3, #28]
 8002896:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800289a:	2b00      	cmp	r3, #0
 800289c:	d003      	beq.n	80028a6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 f926 	bl	8002af0 <HAL_TIM_IC_CaptureCallback>
 80028a4:	e005      	b.n	80028b2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 f919 	bl	8002ade <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f000 f928 	bl	8002b02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00c      	beq.n	80028dc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d007      	beq.n	80028dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f06f 0201 	mvn.w	r2, #1
 80028d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7fe fc54 	bl	8001184 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00c      	beq.n	8002900 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d007      	beq.n	8002900 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80028f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 fa6f 	bl	8002dde <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00c      	beq.n	8002924 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002910:	2b00      	cmp	r3, #0
 8002912:	d007      	beq.n	8002924 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800291c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 f8f8 	bl	8002b14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	f003 0320 	and.w	r3, r3, #32
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00c      	beq.n	8002948 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f003 0320 	and.w	r3, r3, #32
 8002934:	2b00      	cmp	r3, #0
 8002936:	d007      	beq.n	8002948 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f06f 0220 	mvn.w	r2, #32
 8002940:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f000 fa42 	bl	8002dcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002948:	bf00      	nop
 800294a:	3710      	adds	r7, #16
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800295a:	2300      	movs	r3, #0
 800295c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002964:	2b01      	cmp	r3, #1
 8002966:	d101      	bne.n	800296c <HAL_TIM_ConfigClockSource+0x1c>
 8002968:	2302      	movs	r3, #2
 800296a:	e0b4      	b.n	8002ad6 <HAL_TIM_ConfigClockSource+0x186>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2202      	movs	r2, #2
 8002978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800298a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002992:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68ba      	ldr	r2, [r7, #8]
 800299a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029a4:	d03e      	beq.n	8002a24 <HAL_TIM_ConfigClockSource+0xd4>
 80029a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029aa:	f200 8087 	bhi.w	8002abc <HAL_TIM_ConfigClockSource+0x16c>
 80029ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029b2:	f000 8086 	beq.w	8002ac2 <HAL_TIM_ConfigClockSource+0x172>
 80029b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029ba:	d87f      	bhi.n	8002abc <HAL_TIM_ConfigClockSource+0x16c>
 80029bc:	2b70      	cmp	r3, #112	; 0x70
 80029be:	d01a      	beq.n	80029f6 <HAL_TIM_ConfigClockSource+0xa6>
 80029c0:	2b70      	cmp	r3, #112	; 0x70
 80029c2:	d87b      	bhi.n	8002abc <HAL_TIM_ConfigClockSource+0x16c>
 80029c4:	2b60      	cmp	r3, #96	; 0x60
 80029c6:	d050      	beq.n	8002a6a <HAL_TIM_ConfigClockSource+0x11a>
 80029c8:	2b60      	cmp	r3, #96	; 0x60
 80029ca:	d877      	bhi.n	8002abc <HAL_TIM_ConfigClockSource+0x16c>
 80029cc:	2b50      	cmp	r3, #80	; 0x50
 80029ce:	d03c      	beq.n	8002a4a <HAL_TIM_ConfigClockSource+0xfa>
 80029d0:	2b50      	cmp	r3, #80	; 0x50
 80029d2:	d873      	bhi.n	8002abc <HAL_TIM_ConfigClockSource+0x16c>
 80029d4:	2b40      	cmp	r3, #64	; 0x40
 80029d6:	d058      	beq.n	8002a8a <HAL_TIM_ConfigClockSource+0x13a>
 80029d8:	2b40      	cmp	r3, #64	; 0x40
 80029da:	d86f      	bhi.n	8002abc <HAL_TIM_ConfigClockSource+0x16c>
 80029dc:	2b30      	cmp	r3, #48	; 0x30
 80029de:	d064      	beq.n	8002aaa <HAL_TIM_ConfigClockSource+0x15a>
 80029e0:	2b30      	cmp	r3, #48	; 0x30
 80029e2:	d86b      	bhi.n	8002abc <HAL_TIM_ConfigClockSource+0x16c>
 80029e4:	2b20      	cmp	r3, #32
 80029e6:	d060      	beq.n	8002aaa <HAL_TIM_ConfigClockSource+0x15a>
 80029e8:	2b20      	cmp	r3, #32
 80029ea:	d867      	bhi.n	8002abc <HAL_TIM_ConfigClockSource+0x16c>
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d05c      	beq.n	8002aaa <HAL_TIM_ConfigClockSource+0x15a>
 80029f0:	2b10      	cmp	r3, #16
 80029f2:	d05a      	beq.n	8002aaa <HAL_TIM_ConfigClockSource+0x15a>
 80029f4:	e062      	b.n	8002abc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6818      	ldr	r0, [r3, #0]
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	6899      	ldr	r1, [r3, #8]
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685a      	ldr	r2, [r3, #4]
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	f000 f96a 	bl	8002cde <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68ba      	ldr	r2, [r7, #8]
 8002a20:	609a      	str	r2, [r3, #8]
      break;
 8002a22:	e04f      	b.n	8002ac4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6818      	ldr	r0, [r3, #0]
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	6899      	ldr	r1, [r3, #8]
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	f000 f953 	bl	8002cde <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	689a      	ldr	r2, [r3, #8]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a46:	609a      	str	r2, [r3, #8]
      break;
 8002a48:	e03c      	b.n	8002ac4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6818      	ldr	r0, [r3, #0]
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	6859      	ldr	r1, [r3, #4]
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	461a      	mov	r2, r3
 8002a58:	f000 f8ca 	bl	8002bf0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2150      	movs	r1, #80	; 0x50
 8002a62:	4618      	mov	r0, r3
 8002a64:	f000 f921 	bl	8002caa <TIM_ITRx_SetConfig>
      break;
 8002a68:	e02c      	b.n	8002ac4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6818      	ldr	r0, [r3, #0]
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	6859      	ldr	r1, [r3, #4]
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	461a      	mov	r2, r3
 8002a78:	f000 f8e8 	bl	8002c4c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2160      	movs	r1, #96	; 0x60
 8002a82:	4618      	mov	r0, r3
 8002a84:	f000 f911 	bl	8002caa <TIM_ITRx_SetConfig>
      break;
 8002a88:	e01c      	b.n	8002ac4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6818      	ldr	r0, [r3, #0]
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	6859      	ldr	r1, [r3, #4]
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	461a      	mov	r2, r3
 8002a98:	f000 f8aa 	bl	8002bf0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2140      	movs	r1, #64	; 0x40
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f000 f901 	bl	8002caa <TIM_ITRx_SetConfig>
      break;
 8002aa8:	e00c      	b.n	8002ac4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	4610      	mov	r0, r2
 8002ab6:	f000 f8f8 	bl	8002caa <TIM_ITRx_SetConfig>
      break;
 8002aba:	e003      	b.n	8002ac4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	73fb      	strb	r3, [r7, #15]
      break;
 8002ac0:	e000      	b.n	8002ac4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002ac2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	b083      	sub	sp, #12
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ae6:	bf00      	nop
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bc80      	pop	{r7}
 8002aee:	4770      	bx	lr

08002af0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bc80      	pop	{r7}
 8002b00:	4770      	bx	lr

08002b02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b02:	b480      	push	{r7}
 8002b04:	b083      	sub	sp, #12
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b0a:	bf00      	nop
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bc80      	pop	{r7}
 8002b12:	4770      	bx	lr

08002b14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bc80      	pop	{r7}
 8002b24:	4770      	bx	lr
	...

08002b28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4a2b      	ldr	r2, [pc, #172]	; (8002be8 <TIM_Base_SetConfig+0xc0>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d007      	beq.n	8002b50 <TIM_Base_SetConfig+0x28>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b46:	d003      	beq.n	8002b50 <TIM_Base_SetConfig+0x28>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4a28      	ldr	r2, [pc, #160]	; (8002bec <TIM_Base_SetConfig+0xc4>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d108      	bne.n	8002b62 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a20      	ldr	r2, [pc, #128]	; (8002be8 <TIM_Base_SetConfig+0xc0>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d007      	beq.n	8002b7a <TIM_Base_SetConfig+0x52>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b70:	d003      	beq.n	8002b7a <TIM_Base_SetConfig+0x52>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a1d      	ldr	r2, [pc, #116]	; (8002bec <TIM_Base_SetConfig+0xc4>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d108      	bne.n	8002b8c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	689a      	ldr	r2, [r3, #8]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4a0d      	ldr	r2, [pc, #52]	; (8002be8 <TIM_Base_SetConfig+0xc0>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d103      	bne.n	8002bc0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	691a      	ldr	r2, [r3, #16]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d005      	beq.n	8002bde <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	f023 0201 	bic.w	r2, r3, #1
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	611a      	str	r2, [r3, #16]
  }
}
 8002bde:	bf00      	nop
 8002be0:	3714      	adds	r7, #20
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bc80      	pop	{r7}
 8002be6:	4770      	bx	lr
 8002be8:	40012c00 	.word	0x40012c00
 8002bec:	40000400 	.word	0x40000400

08002bf0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b087      	sub	sp, #28
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6a1b      	ldr	r3, [r3, #32]
 8002c00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6a1b      	ldr	r3, [r3, #32]
 8002c06:	f023 0201 	bic.w	r2, r3, #1
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	011b      	lsls	r3, r3, #4
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	f023 030a 	bic.w	r3, r3, #10
 8002c2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	621a      	str	r2, [r3, #32]
}
 8002c42:	bf00      	nop
 8002c44:	371c      	adds	r7, #28
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bc80      	pop	{r7}
 8002c4a:	4770      	bx	lr

08002c4c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b087      	sub	sp, #28
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6a1b      	ldr	r3, [r3, #32]
 8002c5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6a1b      	ldr	r3, [r3, #32]
 8002c62:	f023 0210 	bic.w	r2, r3, #16
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	031b      	lsls	r3, r3, #12
 8002c7c:	693a      	ldr	r2, [r7, #16]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c88:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	011b      	lsls	r3, r3, #4
 8002c8e:	697a      	ldr	r2, [r7, #20]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	697a      	ldr	r2, [r7, #20]
 8002c9e:	621a      	str	r2, [r3, #32]
}
 8002ca0:	bf00      	nop
 8002ca2:	371c      	adds	r7, #28
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bc80      	pop	{r7}
 8002ca8:	4770      	bx	lr

08002caa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002caa:	b480      	push	{r7}
 8002cac:	b085      	sub	sp, #20
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
 8002cb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002cc2:	683a      	ldr	r2, [r7, #0]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	f043 0307 	orr.w	r3, r3, #7
 8002ccc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	609a      	str	r2, [r3, #8]
}
 8002cd4:	bf00      	nop
 8002cd6:	3714      	adds	r7, #20
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bc80      	pop	{r7}
 8002cdc:	4770      	bx	lr

08002cde <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002cde:	b480      	push	{r7}
 8002ce0:	b087      	sub	sp, #28
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	60f8      	str	r0, [r7, #12]
 8002ce6:	60b9      	str	r1, [r7, #8]
 8002ce8:	607a      	str	r2, [r7, #4]
 8002cea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cf8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	021a      	lsls	r2, r3, #8
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	431a      	orrs	r2, r3
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	609a      	str	r2, [r3, #8]
}
 8002d12:	bf00      	nop
 8002d14:	371c      	adds	r7, #28
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bc80      	pop	{r7}
 8002d1a:	4770      	bx	lr

08002d1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d101      	bne.n	8002d34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d30:	2302      	movs	r3, #2
 8002d32:	e041      	b.n	8002db8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2202      	movs	r2, #2
 8002d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a14      	ldr	r2, [pc, #80]	; (8002dc4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d009      	beq.n	8002d8c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d80:	d004      	beq.n	8002d8c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a10      	ldr	r2, [pc, #64]	; (8002dc8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d10c      	bne.n	8002da6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d92:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	68ba      	ldr	r2, [r7, #8]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68ba      	ldr	r2, [r7, #8]
 8002da4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3714      	adds	r7, #20
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bc80      	pop	{r7}
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	40012c00 	.word	0x40012c00
 8002dc8:	40000400 	.word	0x40000400

08002dcc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bc80      	pop	{r7}
 8002ddc:	4770      	bx	lr

08002dde <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002dde:	b480      	push	{r7}
 8002de0:	b083      	sub	sp, #12
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002de6:	bf00      	nop
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bc80      	pop	{r7}
 8002dee:	4770      	bx	lr

08002df0 <__libc_init_array>:
 8002df0:	b570      	push	{r4, r5, r6, lr}
 8002df2:	2600      	movs	r6, #0
 8002df4:	4d0c      	ldr	r5, [pc, #48]	; (8002e28 <__libc_init_array+0x38>)
 8002df6:	4c0d      	ldr	r4, [pc, #52]	; (8002e2c <__libc_init_array+0x3c>)
 8002df8:	1b64      	subs	r4, r4, r5
 8002dfa:	10a4      	asrs	r4, r4, #2
 8002dfc:	42a6      	cmp	r6, r4
 8002dfe:	d109      	bne.n	8002e14 <__libc_init_array+0x24>
 8002e00:	f000 f822 	bl	8002e48 <_init>
 8002e04:	2600      	movs	r6, #0
 8002e06:	4d0a      	ldr	r5, [pc, #40]	; (8002e30 <__libc_init_array+0x40>)
 8002e08:	4c0a      	ldr	r4, [pc, #40]	; (8002e34 <__libc_init_array+0x44>)
 8002e0a:	1b64      	subs	r4, r4, r5
 8002e0c:	10a4      	asrs	r4, r4, #2
 8002e0e:	42a6      	cmp	r6, r4
 8002e10:	d105      	bne.n	8002e1e <__libc_init_array+0x2e>
 8002e12:	bd70      	pop	{r4, r5, r6, pc}
 8002e14:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e18:	4798      	blx	r3
 8002e1a:	3601      	adds	r6, #1
 8002e1c:	e7ee      	b.n	8002dfc <__libc_init_array+0xc>
 8002e1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e22:	4798      	blx	r3
 8002e24:	3601      	adds	r6, #1
 8002e26:	e7f2      	b.n	8002e0e <__libc_init_array+0x1e>
 8002e28:	08002e84 	.word	0x08002e84
 8002e2c:	08002e84 	.word	0x08002e84
 8002e30:	08002e84 	.word	0x08002e84
 8002e34:	08002e88 	.word	0x08002e88

08002e38 <memset>:
 8002e38:	4603      	mov	r3, r0
 8002e3a:	4402      	add	r2, r0
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d100      	bne.n	8002e42 <memset+0xa>
 8002e40:	4770      	bx	lr
 8002e42:	f803 1b01 	strb.w	r1, [r3], #1
 8002e46:	e7f9      	b.n	8002e3c <memset+0x4>

08002e48 <_init>:
 8002e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e4a:	bf00      	nop
 8002e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e4e:	bc08      	pop	{r3}
 8002e50:	469e      	mov	lr, r3
 8002e52:	4770      	bx	lr

08002e54 <_fini>:
 8002e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e56:	bf00      	nop
 8002e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e5a:	bc08      	pop	{r3}
 8002e5c:	469e      	mov	lr, r3
 8002e5e:	4770      	bx	lr
